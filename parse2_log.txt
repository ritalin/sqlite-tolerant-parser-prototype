   Compiling parser v0.1.0 (/Users/tamurakazuhiko/work/test/rust/sqlite-tolerant-parser-prototype/crates/parser)
warning: unused import: `syntax::ResolvedElementRef`
 --> crates/parser/src/lib.rs:3:80
  |
3 | use cstree::{green::{GreenNode, GreenToken}, interning::{InternKey, TokenKey}, syntax::ResolvedElementRef, util::NodeOrToken};
  |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `core::prelude::v1`
 --> crates/parser/src/parser.rs:1:5
  |
1 | use core::prelude::v1;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `ScannerScope`
 --> crates/parser/src/parser.rs:6:24
  |
6 | use scanner::{Scanner, ScannerScope, Token, TokenItem};
  |                        ^^^^^^^^^^^^

warning: unused variable: `current_state`
   --> crates/parser/src/parser.rs:466:40
    |
466 | fn create_green_node(kind: SyntaxKind, current_state: usize, pop_count: usize, stack: &mut Vec<Option<NodeElementOrError>>, annotation_ma...
    |                                        ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_state`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `state`
   --> crates/parser/src/parser.rs:591:28
    |
591 | fn create_blank_error_node(state: usize, annotations: &mut HashMap<NodeId, (Annotation, AnnotationStatus)>) -> Result<Option<NodeElement>...
    |                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `annotations`
   --> crates/parser/src/parser.rs:591:42
    |
591 | fn create_blank_error_node(state: usize, annotations: &mut HashMap<NodeId, (Annotation, AnnotationStatus)>) -> Result<Option<NodeElement>...
    |                                          ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_annotations`

warning: unused variable: `current_state`
   --> crates/parser/src/parser.rs:914:5
    |
914 |     current_state: usize,
    |     ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_state`

warning: method `is_empty` is never used
   --> crates/parser/src/parser.rs:103:12
    |
64  | impl StateStack {
    | --------------- method in this implementation
...
103 |     pub fn is_empty(&self) -> bool {
    |            ^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: field `recovery` is never read
   --> crates/parser/src/parser.rs:791:5
    |
790 | struct Journal {
    |        ------- field in this struct
791 |     recovery: Recovery,
    |     ^^^^^^^^

warning: `parser` (lib test) generated 9 warnings (6 duplicates)
warning: `parser` (lib) generated 9 warnings (3 duplicates) (run `cargo fix --lib -p parser` to apply 3 suggestions)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 3.07s
     Running unittests src/lib.rs (target/debug/deps/parser-7cb121464e2b5e8e)
     Running unittests src/bin/parsing_tree/main.rs (target/debug/deps/parsing_tree-88925103619f6db5)
[DEBUG] Shift/kind: SELECT, push ([18, 0])
(start recovery) --------------------------------------------------------------------------------
Won by shift#1
[DEBUG] Reduce/kind: distinct, pop(0)&push ([72, 18, 0])
[DEBUG] Reduce/kind: sclp, pop(0)&push ([145, 72, 18, 0])
[DEBUG] Reduce/kind: scanpt, pop(0)&push ([239, 145, 72, 18, 0])
[DEBUG] Shift/kind: STAR, push ([361, 239, 145, 72, 18, 0])
[DEBUG] Reduce/kind: selcollist, pop(3)&push ([146, 72, 18, 0])
[DEBUG] Shift/kind: FROM, push ([241, 146, 72, 18, 0])
[DEBUG] Reduce/kind: stl_prefix, pop(0)&push ([365, 241, 146, 72, 18, 0])
[DEBUG] Shift/kind: ID, push ([45, 365, 241, 146, 72, 18, 0])
(finish recovery) --------------------------------------------------------------------------------
[DEBUG] Reduce/kind: nm, pop(1)&push ([475, 365, 241, 146, 72, 18, 0])
[DEBUG] Reduce/kind: dbnm, pop(0)&push ([586, 475, 365, 241, 146, 72, 18, 0])
[DEBUG] Reduce/kind: as, pop(0)&push ([668, 586, 475, 365, 241, 146, 72, 18, 0])
[DEBUG] Reduce/kind: on_using, pop(0)&push ([741, 668, 586, 475, 365, 241, 146, 72, 18, 0])
[DEBUG] Reduce/kind: seltablist, pop(5)&push ([364, 241, 146, 72, 18, 0])
[DEBUG] Reduce/kind: from, pop(2)&push ([242, 146, 72, 18, 0])
[DEBUG] Reduce/kind: where_opt, pop(0)&push ([367, 242, 146, 72, 18, 0])
[DEBUG] Reduce/kind: groupby_opt, pop(0)&push ([478, 367, 242, 146, 72, 18, 0])
[DEBUG] Reduce/kind: having_opt, pop(0)&push ([589, 478, 367, 242, 146, 72, 18, 0])
[DEBUG] Reduce/kind: orderby_opt, pop(0)&push ([673, 589, 478, 367, 242, 146, 72, 18, 0])
[DEBUG] Reduce/kind: limit_opt, pop(0)&push ([747, 673, 589, 478, 367, 242, 146, 72, 18, 0])
[DEBUG] Reduce/kind: oneselect, pop(9)&push ([31, 0])
