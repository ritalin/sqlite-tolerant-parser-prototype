package ritalin:scanner@0.0.1;

interface types {
    record token {
        leading: option<list<token-item>>,
        main: token-item,
        trailing: option<list<token-item>>,
    }

    record token-item {
        kind: syntax-kind,
        offset: u32,
        len: u32,
        value: option<string>,
    }

    record syntax-kind {
        id: u32,
        text: string,
        is-keyword: bool,
        is-terminal: bool,
    }

    record scanner-scope {
        next-index: u32,
        lookahead: option<token>,
    }
}

interface scanners {
    use types.{token, scanner-scope};

    resource scanner {
        // Create new scanner instance.
        // If you want to skip index for scouece string, pass `index-from` to more `0`.
        create: static func(source: string, index-from: u32) -> scanner;
        lookahead: func() -> option<token>;
        shift: func() -> option<token>;
        scope: func() -> scanner-scope;
        revert: func(scope: scanner-scope);
    }
}

world scanner-world {
    export types;
    export scanners;
}