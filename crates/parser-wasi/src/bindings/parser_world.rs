// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * with "ritalin:scanner/types@0.0.1" = "scanner_wasi::scanner_types"
//   * default-bindings-module: "crate::bindings::parser_world"
use scanner_wasi::scanner_types as __with_name1;
#[allow(dead_code, clippy::all)]
pub mod exports {
  pub mod ritalin {
    pub mod parser {

      #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
      pub mod syntax {
        #[used]
        #[doc(hidden)]
        static __FORCE_SECTION_REF: fn() =
        super::super::super::super::__link_custom_section_describing_imports;
        
        use super::super::super::super::_rt;
        pub type SyntaxKind = super::super::super::super::__with_name1::SyntaxKind;

        #[derive(Debug)]
        #[repr(transparent)]
        pub struct Tree{
          handle: _rt::Resource<Tree>,
        }

        type _TreeRep<T> = Option<T>;

        impl Tree{
          /// Creates a new resource from the specified representation.
          ///
          /// This function will create a new resource handle by moving `val` onto
          /// the heap and then passing that heap pointer to the component model to
          /// create a handle. The owned handle is then returned as `Tree`.
          pub fn new<T: GuestTree>(val: T) -> Self {
            Self::type_guard::<T>();
            let val: _TreeRep<T> = Some(val);
            let ptr: *mut _TreeRep<T> =
            _rt::Box::into_raw(_rt::Box::new(val));
            unsafe {
              Self::from_handle(T::_resource_new(ptr.cast()))
            }
          }

          /// Gets access to the underlying `T` which represents this resource.
          pub fn get<T: GuestTree>(&self) -> &T {
            let ptr = unsafe { &*self.as_ptr::<T>() };
            ptr.as_ref().unwrap()
          }

          /// Gets mutable access to the underlying `T` which represents this
          /// resource.
          pub fn get_mut<T: GuestTree>(&mut self) -> &mut T {
            let ptr = unsafe { &mut *self.as_ptr::<T>() };
            ptr.as_mut().unwrap()
          }

          /// Consumes this resource and returns the underlying `T`.
          pub fn into_inner<T: GuestTree>(self) -> T {
            let ptr = unsafe { &mut *self.as_ptr::<T>() };
            ptr.take().unwrap()
          }

          #[doc(hidden)]
          pub unsafe fn from_handle(handle: u32) -> Self {
            Self {
              handle: unsafe { _rt::Resource::from_handle(handle) },
            }
          }

          #[doc(hidden)]
          pub fn take_handle(&self) -> u32 {
            _rt::Resource::take_handle(&self.handle)
          }

          #[doc(hidden)]
          pub fn handle(&self) -> u32 {
            _rt::Resource::handle(&self.handle)
          }

          // It's theoretically possible to implement the `GuestTree` trait twice
          // so guard against using it with two different types here.
          #[doc(hidden)]
          fn type_guard<T: 'static>() {
            use core::any::TypeId;
            static mut LAST_TYPE: Option<TypeId> = None;
            unsafe {
              assert!(!cfg!(target_feature = "atomics"));
              let id = TypeId::of::<T>();
              match LAST_TYPE {
                Some(ty) => assert!(ty == id, "cannot use two types with this resource type"),
                None => LAST_TYPE = Some(id),
              }
            }
          }

          #[doc(hidden)]
          pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
            Self::type_guard::<T>();
            let _ = unsafe { _rt::Box::from_raw(handle as *mut _TreeRep<T>) };
          }

          fn as_ptr<T: GuestTree>(&self) -> *mut _TreeRep<T> {
            Tree::type_guard::<T>();
            T::_resource_rep(self.handle()).cast()
          }
        }

        /// A borrowed version of [`Tree`] which represents a borrowed value
        /// with the lifetime `'a`.
        #[derive(Debug)]
        #[repr(transparent)]
        pub struct TreeBorrow<'a> {
          rep: *mut u8,
          _marker: core::marker::PhantomData<&'a Tree>,
        }

        impl<'a> TreeBorrow<'a>{
          #[doc(hidden)]
          pub unsafe fn lift(rep: usize) -> Self {
            Self {
              rep: rep as *mut u8,
              _marker: core::marker::PhantomData,
            }
          }

          /// Gets access to the underlying `T` in this resource.
          pub fn get<T: GuestTree>(&self) -> &T {
            let ptr = unsafe { &mut *self.as_ptr::<T>() };
            ptr.as_ref().unwrap()
          }

          // NB: mutable access is not allowed due to the component model allowing
          // multiple borrows of the same resource.

          fn as_ptr<T: 'static>(&self) -> *mut _TreeRep<T> {
            Tree::type_guard::<T>();
            self.rep.cast()
          }
        }
        

        unsafe impl _rt::WasmResource for Tree{
          #[inline]
          unsafe fn drop(_handle: u32) {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();

            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]ritalin:parser/syntax@0.0.1")]
              unsafe extern "C" {
                #[link_name = "[resource-drop]tree"]
                fn drop(_: u32);
              }

              unsafe { drop(_handle) };
            }
          }
        }
        

        #[derive(Debug)]
        #[repr(transparent)]
        pub struct Node{
          handle: _rt::Resource<Node>,
        }

        type _NodeRep<T> = Option<T>;

        impl Node{
          /// Creates a new resource from the specified representation.
          ///
          /// This function will create a new resource handle by moving `val` onto
          /// the heap and then passing that heap pointer to the component model to
          /// create a handle. The owned handle is then returned as `Node`.
          pub fn new<T: GuestNode>(val: T) -> Self {
            Self::type_guard::<T>();
            let val: _NodeRep<T> = Some(val);
            let ptr: *mut _NodeRep<T> =
            _rt::Box::into_raw(_rt::Box::new(val));
            unsafe {
              Self::from_handle(T::_resource_new(ptr.cast()))
            }
          }

          /// Gets access to the underlying `T` which represents this resource.
          pub fn get<T: GuestNode>(&self) -> &T {
            let ptr = unsafe { &*self.as_ptr::<T>() };
            ptr.as_ref().unwrap()
          }

          /// Gets mutable access to the underlying `T` which represents this
          /// resource.
          pub fn get_mut<T: GuestNode>(&mut self) -> &mut T {
            let ptr = unsafe { &mut *self.as_ptr::<T>() };
            ptr.as_mut().unwrap()
          }

          /// Consumes this resource and returns the underlying `T`.
          pub fn into_inner<T: GuestNode>(self) -> T {
            let ptr = unsafe { &mut *self.as_ptr::<T>() };
            ptr.take().unwrap()
          }

          #[doc(hidden)]
          pub unsafe fn from_handle(handle: u32) -> Self {
            Self {
              handle: unsafe { _rt::Resource::from_handle(handle) },
            }
          }

          #[doc(hidden)]
          pub fn take_handle(&self) -> u32 {
            _rt::Resource::take_handle(&self.handle)
          }

          #[doc(hidden)]
          pub fn handle(&self) -> u32 {
            _rt::Resource::handle(&self.handle)
          }

          // It's theoretically possible to implement the `GuestNode` trait twice
          // so guard against using it with two different types here.
          #[doc(hidden)]
          fn type_guard<T: 'static>() {
            use core::any::TypeId;
            static mut LAST_TYPE: Option<TypeId> = None;
            unsafe {
              assert!(!cfg!(target_feature = "atomics"));
              let id = TypeId::of::<T>();
              match LAST_TYPE {
                Some(ty) => assert!(ty == id, "cannot use two types with this resource type"),
                None => LAST_TYPE = Some(id),
              }
            }
          }

          #[doc(hidden)]
          pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
            Self::type_guard::<T>();
            let _ = unsafe { _rt::Box::from_raw(handle as *mut _NodeRep<T>) };
          }

          fn as_ptr<T: GuestNode>(&self) -> *mut _NodeRep<T> {
            Node::type_guard::<T>();
            T::_resource_rep(self.handle()).cast()
          }
        }

        /// A borrowed version of [`Node`] which represents a borrowed value
        /// with the lifetime `'a`.
        #[derive(Debug)]
        #[repr(transparent)]
        pub struct NodeBorrow<'a> {
          rep: *mut u8,
          _marker: core::marker::PhantomData<&'a Node>,
        }

        impl<'a> NodeBorrow<'a>{
          #[doc(hidden)]
          pub unsafe fn lift(rep: usize) -> Self {
            Self {
              rep: rep as *mut u8,
              _marker: core::marker::PhantomData,
            }
          }

          /// Gets access to the underlying `T` in this resource.
          pub fn get<T: GuestNode>(&self) -> &T {
            let ptr = unsafe { &mut *self.as_ptr::<T>() };
            ptr.as_ref().unwrap()
          }

          // NB: mutable access is not allowed due to the component model allowing
          // multiple borrows of the same resource.

          fn as_ptr<T: 'static>(&self) -> *mut _NodeRep<T> {
            Node::type_guard::<T>();
            self.rep.cast()
          }
        }
        

        unsafe impl _rt::WasmResource for Node{
          #[inline]
          unsafe fn drop(_handle: u32) {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();

            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]ritalin:parser/syntax@0.0.1")]
              unsafe extern "C" {
                #[link_name = "[resource-drop]node"]
                fn drop(_: u32);
              }

              unsafe { drop(_handle) };
            }
          }
        }
        
        #[repr(u8)]
        #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
        pub enum NodeType {
          TokenSet,
          LeadingToken,
          TrailingToken,
          MainToken,
          Node,
          Error,
          FatalError,
        }
        impl ::core::fmt::Debug for NodeType {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              NodeType::TokenSet => {
                f.debug_tuple("NodeType::TokenSet").finish()
              }
              NodeType::LeadingToken => {
                f.debug_tuple("NodeType::LeadingToken").finish()
              }
              NodeType::TrailingToken => {
                f.debug_tuple("NodeType::TrailingToken").finish()
              }
              NodeType::MainToken => {
                f.debug_tuple("NodeType::MainToken").finish()
              }
              NodeType::Node => {
                f.debug_tuple("NodeType::Node").finish()
              }
              NodeType::Error => {
                f.debug_tuple("NodeType::Error").finish()
              }
              NodeType::FatalError => {
                f.debug_tuple("NodeType::FatalError").finish()
              }
            }
          }
        }

        impl NodeType{
          #[doc(hidden)]
          pub unsafe fn _lift(val: u8) -> NodeType{
            if !cfg!(debug_assertions) {
              return ::core::mem::transmute(val);
            }

            match val {
              0 => NodeType::TokenSet,
              1 => NodeType::LeadingToken,
              2 => NodeType::TrailingToken,
              3 => NodeType::MainToken,
              4 => NodeType::Node,
              5 => NodeType::Error,
              6 => NodeType::FatalError,

              _ => panic!("invalid enum discriminant"),
            }
          }
        }
        
        #[repr(u8)]
        #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
        pub enum RecoveryStatus {
          Delete,
          Shift,
        }
        impl ::core::fmt::Debug for RecoveryStatus {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              RecoveryStatus::Delete => {
                f.debug_tuple("RecoveryStatus::Delete").finish()
              }
              RecoveryStatus::Shift => {
                f.debug_tuple("RecoveryStatus::Shift").finish()
              }
            }
          }
        }

        impl RecoveryStatus{
          #[doc(hidden)]
          pub unsafe fn _lift(val: u8) -> RecoveryStatus{
            if !cfg!(debug_assertions) {
              return ::core::mem::transmute(val);
            }

            match val {
              0 => RecoveryStatus::Delete,
              1 => RecoveryStatus::Shift,

              _ => panic!("invalid enum discriminant"),
            }
          }
        }
        
        #[derive(Clone)]
        pub struct Metadata {
          pub kind: SyntaxKind,
          pub node_type: NodeType,
          pub state: u64,
          pub recovery: Option<RecoveryStatus>,
        }
        impl ::core::fmt::Debug for Metadata {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Metadata").field("kind", &self.kind).field("node-type", &self.node_type).field("state", &self.state).field("recovery", &self.recovery).finish()
          }
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_method_tree_root_cabi<T: GuestTree>(arg0: *mut u8,) -> i32 {#[cfg(target_arch="wasm32")]
        _rt::run_ctors_once();let result0 = T::root(unsafe { TreeBorrow::lift(arg0 as u32 as usize) }.get());
        (result0).take_handle() as i32
      }
      #[doc(hidden)]
      #[allow(non_snake_case)]
      pub unsafe fn _export_method_node_metadata_cabi<T: GuestNode>(arg0: *mut u8,) -> *mut u8 {#[cfg(target_arch="wasm32")]
      _rt::run_ctors_once();let result0 = T::metadata(unsafe { NodeBorrow::lift(arg0 as u32 as usize) }.get());
      let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
      let Metadata{ kind:kind2, node_type:node_type2, state:state2, recovery:recovery2, } = result0;
      let super::super::super::super::__with_name1::SyntaxKind{ id:id3, text:text3, is_keyword:is_keyword3, is_terminal:is_terminal3, } = kind2;
      *ptr1.add(0).cast::<i32>() = _rt::as_i32(id3);
      let vec4 = (text3.into_bytes()).into_boxed_slice();
      let ptr4 = vec4.as_ptr().cast::<u8>();
      let len4 = vec4.len();
      ::core::mem::forget(vec4);
      *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
      *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr4.cast_mut();
      *ptr1.add(3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (match is_keyword3 { true => 1, false => 0 }) as u8;
      *ptr1.add(1+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (match is_terminal3 { true => 1, false => 0 }) as u8;
      *ptr1.add(4*::core::mem::size_of::<*const u8>()).cast::<u8>() = (node_type2.clone() as i32) as u8;
      *ptr1.add(8+4*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(state2);
      match recovery2 {
        Some(e) => {
          *ptr1.add(16+4*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
          *ptr1.add(17+4*::core::mem::size_of::<*const u8>()).cast::<u8>() = (e.clone() as i32) as u8;
        },
        None => {
          {
            *ptr1.add(16+4*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
          }
        },
      };ptr1
    }
    #[doc(hidden)]
    #[allow(non_snake_case)]
    pub unsafe fn __post_return_method_node_metadata<T: GuestNode>(arg0: *mut u8,) {
      let l0 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l1 = *arg0.add(2*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l0, l1, 1);
    }
    #[doc(hidden)]
    #[allow(non_snake_case)]
    pub unsafe fn _export_method_node_offset_start_cabi<T: GuestNode>(arg0: *mut u8,) -> i32 {#[cfg(target_arch="wasm32")]
    _rt::run_ctors_once();let result0 = T::offset_start(unsafe { NodeBorrow::lift(arg0 as u32 as usize) }.get());
    _rt::as_i32(result0)
  }
  #[doc(hidden)]
  #[allow(non_snake_case)]
  pub unsafe fn _export_method_node_offset_end_cabi<T: GuestNode>(arg0: *mut u8,) -> i32 {#[cfg(target_arch="wasm32")]
  _rt::run_ctors_once();let result0 = T::offset_end(unsafe { NodeBorrow::lift(arg0 as u32 as usize) }.get());
  _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_node_value_cabi<T: GuestNode>(arg0: *mut u8,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::value(unsafe { NodeBorrow::lift(arg0 as u32 as usize) }.get());
let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
match result0 {
  Some(e) => {
    *ptr1.add(0).cast::<u8>() = (1i32) as u8;
    let vec2 = (e.into_bytes()).into_boxed_slice();
    let ptr2 = vec2.as_ptr().cast::<u8>();
    let len2 = vec2.len();
    ::core::mem::forget(vec2);
    *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr2.cast_mut();
  },
  None => {
    {
      *ptr1.add(0).cast::<u8>() = (0i32) as u8;
    }
  },
};ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_node_value<T: GuestNode>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l2 = *arg0.add(2*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l1, l2, 1);
    },
  }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_node_leading_trivia_cabi<T: GuestNode>(arg0: *mut u8,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::leading_trivia(unsafe { NodeBorrow::lift(arg0 as u32 as usize) }.get());
let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
let vec2 = result0;
let len2 = vec2.len();
let layout2 = _rt::alloc::Layout::from_size_align_unchecked(vec2.len() * 4, 4);
let result2 = if layout2.size() != 0 {
  let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
  if ptr.is_null()
  {
    _rt::alloc::handle_alloc_error(layout2);
  }
  ptr
}else {
  ::core::ptr::null_mut()
};
for (i, e) in vec2.into_iter().enumerate() {
  let base = result2.add(i * 4);
  {
    *base.add(0).cast::<i32>() = (e).take_handle() as i32;
  }
}
*ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
*ptr1.add(0).cast::<*mut u8>() = result2;
ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_node_leading_trivia<T: GuestNode>(arg0: *mut u8,) {
  let l0 = *arg0.add(0).cast::<*mut u8>();
  let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
  let base2 = l0;
  let len2 = l1;
  _rt::cabi_dealloc(base2, len2 * 4, 4);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_node_traling_trivia_cabi<T: GuestNode>(arg0: *mut u8,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::traling_trivia(unsafe { NodeBorrow::lift(arg0 as u32 as usize) }.get());
let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
let vec2 = result0;
let len2 = vec2.len();
let layout2 = _rt::alloc::Layout::from_size_align_unchecked(vec2.len() * 4, 4);
let result2 = if layout2.size() != 0 {
  let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
  if ptr.is_null()
  {
    _rt::alloc::handle_alloc_error(layout2);
  }
  ptr
}else {
  ::core::ptr::null_mut()
};
for (i, e) in vec2.into_iter().enumerate() {
  let base = result2.add(i * 4);
  {
    *base.add(0).cast::<i32>() = (e).take_handle() as i32;
  }
}
*ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
*ptr1.add(0).cast::<*mut u8>() = result2;
ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_node_traling_trivia<T: GuestNode>(arg0: *mut u8,) {
  let l0 = *arg0.add(0).cast::<*mut u8>();
  let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
  let base2 = l0;
  let len2 = l1;
  _rt::cabi_dealloc(base2, len2 * 4, 4);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_node_children_cabi<T: GuestNode>(arg0: *mut u8,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::children(unsafe { NodeBorrow::lift(arg0 as u32 as usize) }.get());
let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
let vec2 = result0;
let len2 = vec2.len();
let layout2 = _rt::alloc::Layout::from_size_align_unchecked(vec2.len() * 4, 4);
let result2 = if layout2.size() != 0 {
  let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
  if ptr.is_null()
  {
    _rt::alloc::handle_alloc_error(layout2);
  }
  ptr
}else {
  ::core::ptr::null_mut()
};
for (i, e) in vec2.into_iter().enumerate() {
  let base = result2.add(i * 4);
  {
    *base.add(0).cast::<i32>() = (e).take_handle() as i32;
  }
}
*ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
*ptr1.add(0).cast::<*mut u8>() = result2;
ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_node_children<T: GuestNode>(arg0: *mut u8,) {
  let l0 = *arg0.add(0).cast::<*mut u8>();
  let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
  let base2 = l0;
  let len2 = l1;
  _rt::cabi_dealloc(base2, len2 * 4, 4);
}
pub trait Guest {
  type Tree: GuestTree;
  type Node: GuestNode;
}
pub trait GuestTree: 'static {

  #[doc(hidden)]
  unsafe fn _resource_new(val: *mut u8) -> u32
  where Self: Sized
  {
    #[cfg(not(target_arch = "wasm32"))]
    {
      let _ = val;
      unreachable!();
    }

    #[cfg(target_arch = "wasm32")]
    {
      #[link(wasm_import_module = "[export]ritalin:parser/syntax@0.0.1")]
      unsafe extern "C" {
        #[link_name = "[resource-new]tree"]
        fn new(_: *mut u8) -> u32;
      }
      unsafe { new(val) }
    }
  }

  #[doc(hidden)]
  fn _resource_rep(handle: u32) -> *mut u8
  where Self: Sized
  {
    #[cfg(not(target_arch = "wasm32"))]
    {
      let _ = handle;
      unreachable!();
    }

    #[cfg(target_arch = "wasm32")]
    {
      #[link(wasm_import_module = "[export]ritalin:parser/syntax@0.0.1")]
      unsafe extern "C" {
        #[link_name = "[resource-rep]tree"]
        fn rep(_: u32) -> *mut u8;
      }
      unsafe {
        rep(handle)
      }
    }
  }

  
  fn root(&self,) -> Node;
}
pub trait GuestNode: 'static {

  #[doc(hidden)]
  unsafe fn _resource_new(val: *mut u8) -> u32
  where Self: Sized
  {
    #[cfg(not(target_arch = "wasm32"))]
    {
      let _ = val;
      unreachable!();
    }

    #[cfg(target_arch = "wasm32")]
    {
      #[link(wasm_import_module = "[export]ritalin:parser/syntax@0.0.1")]
      unsafe extern "C" {
        #[link_name = "[resource-new]node"]
        fn new(_: *mut u8) -> u32;
      }
      unsafe { new(val) }
    }
  }

  #[doc(hidden)]
  fn _resource_rep(handle: u32) -> *mut u8
  where Self: Sized
  {
    #[cfg(not(target_arch = "wasm32"))]
    {
      let _ = handle;
      unreachable!();
    }

    #[cfg(target_arch = "wasm32")]
    {
      #[link(wasm_import_module = "[export]ritalin:parser/syntax@0.0.1")]
      unsafe extern "C" {
        #[link_name = "[resource-rep]node"]
        fn rep(_: u32) -> *mut u8;
      }
      unsafe {
        rep(handle)
      }
    }
  }

  
  fn metadata(&self,) -> Metadata;
  fn offset_start(&self,) -> u32;
  fn offset_end(&self,) -> u32;
  fn value(&self,) -> Option<_rt::String>;
  fn leading_trivia(&self,) -> _rt::Vec::<Node>;
  fn traling_trivia(&self,) -> _rt::Vec::<Node>;
  fn children(&self,) -> _rt::Vec::<Node>;
}
#[doc(hidden)]

macro_rules! __export_ritalin_parser_syntax_0_0_1_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[unsafe(export_name = "ritalin:parser/syntax@0.0.1#[method]tree.root")]
    unsafe extern "C" fn export_method_tree_root(arg0: *mut u8,) -> i32 {
      unsafe { $($path_to_types)*::_export_method_tree_root_cabi::<<$ty as $($path_to_types)*::Guest>::Tree>(arg0) }
    }
    #[unsafe(export_name = "ritalin:parser/syntax@0.0.1#[method]node.metadata")]
    unsafe extern "C" fn export_method_node_metadata(arg0: *mut u8,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_method_node_metadata_cabi::<<$ty as $($path_to_types)*::Guest>::Node>(arg0) }
    }
    #[unsafe(export_name = "cabi_post_ritalin:parser/syntax@0.0.1#[method]node.metadata")]
    unsafe extern "C" fn _post_return_method_node_metadata(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_method_node_metadata::<<$ty as $($path_to_types)*::Guest>::Node>(arg0) }
    }
    #[unsafe(export_name = "ritalin:parser/syntax@0.0.1#[method]node.offset-start")]
    unsafe extern "C" fn export_method_node_offset_start(arg0: *mut u8,) -> i32 {
      unsafe { $($path_to_types)*::_export_method_node_offset_start_cabi::<<$ty as $($path_to_types)*::Guest>::Node>(arg0) }
    }
    #[unsafe(export_name = "ritalin:parser/syntax@0.0.1#[method]node.offset-end")]
    unsafe extern "C" fn export_method_node_offset_end(arg0: *mut u8,) -> i32 {
      unsafe { $($path_to_types)*::_export_method_node_offset_end_cabi::<<$ty as $($path_to_types)*::Guest>::Node>(arg0) }
    }
    #[unsafe(export_name = "ritalin:parser/syntax@0.0.1#[method]node.value")]
    unsafe extern "C" fn export_method_node_value(arg0: *mut u8,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_method_node_value_cabi::<<$ty as $($path_to_types)*::Guest>::Node>(arg0) }
    }
    #[unsafe(export_name = "cabi_post_ritalin:parser/syntax@0.0.1#[method]node.value")]
    unsafe extern "C" fn _post_return_method_node_value(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_method_node_value::<<$ty as $($path_to_types)*::Guest>::Node>(arg0) }
    }
    #[unsafe(export_name = "ritalin:parser/syntax@0.0.1#[method]node.leading-trivia")]
    unsafe extern "C" fn export_method_node_leading_trivia(arg0: *mut u8,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_method_node_leading_trivia_cabi::<<$ty as $($path_to_types)*::Guest>::Node>(arg0) }
    }
    #[unsafe(export_name = "cabi_post_ritalin:parser/syntax@0.0.1#[method]node.leading-trivia")]
    unsafe extern "C" fn _post_return_method_node_leading_trivia(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_method_node_leading_trivia::<<$ty as $($path_to_types)*::Guest>::Node>(arg0) }
    }
    #[unsafe(export_name = "ritalin:parser/syntax@0.0.1#[method]node.traling-trivia")]
    unsafe extern "C" fn export_method_node_traling_trivia(arg0: *mut u8,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_method_node_traling_trivia_cabi::<<$ty as $($path_to_types)*::Guest>::Node>(arg0) }
    }
    #[unsafe(export_name = "cabi_post_ritalin:parser/syntax@0.0.1#[method]node.traling-trivia")]
    unsafe extern "C" fn _post_return_method_node_traling_trivia(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_method_node_traling_trivia::<<$ty as $($path_to_types)*::Guest>::Node>(arg0) }
    }
    #[unsafe(export_name = "ritalin:parser/syntax@0.0.1#[method]node.children")]
    unsafe extern "C" fn export_method_node_children(arg0: *mut u8,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_method_node_children_cabi::<<$ty as $($path_to_types)*::Guest>::Node>(arg0) }
    }
    #[unsafe(export_name = "cabi_post_ritalin:parser/syntax@0.0.1#[method]node.children")]
    unsafe extern "C" fn _post_return_method_node_children(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_method_node_children::<<$ty as $($path_to_types)*::Guest>::Node>(arg0) }
    }

    const _: () = {
      #[doc(hidden)]
      #[unsafe(export_name = "ritalin:parser/syntax@0.0.1#[dtor]tree")]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        unsafe {
          $($path_to_types)*::Tree::dtor::<
          <$ty as $($path_to_types)*::Guest>::Tree
          >(rep)
        }
      }
    };
    

    const _: () = {
      #[doc(hidden)]
      #[unsafe(export_name = "ritalin:parser/syntax@0.0.1#[dtor]node")]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        unsafe {
          $($path_to_types)*::Node::dtor::<
          <$ty as $($path_to_types)*::Guest>::Node
          >(rep)
        }
      }
    };
    
  };);
}
#[doc(hidden)]
pub(crate) use __export_ritalin_parser_syntax_0_0_1_cabi;

#[repr(align(8))]
struct _RetArea([::core::mem::MaybeUninit::<u8>; 24+4*::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 24+4*::core::mem::size_of::<*const u8>()]);

}


#[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
pub mod parsers {
  #[used]
  #[doc(hidden)]
  static __FORCE_SECTION_REF: fn() =
  super::super::super::super::__link_custom_section_describing_imports;
  
  use super::super::super::super::_rt;
  pub type Tree = super::super::super::super::exports::ritalin::parser::syntax::Tree;
  pub type TreeBorrow<'a> = super::super::super::super::exports::ritalin::parser::syntax::TreeBorrow<'a>;
  pub type SyntaxTree = Tree;
  pub type SyntaxTreeBorrow<'a> = TreeBorrow<'a>;

  #[derive(Debug)]
  #[repr(transparent)]
  pub struct Parser{
    handle: _rt::Resource<Parser>,
  }

  type _ParserRep<T> = Option<T>;

  impl Parser{
    /// Creates a new resource from the specified representation.
    ///
    /// This function will create a new resource handle by moving `val` onto
    /// the heap and then passing that heap pointer to the component model to
    /// create a handle. The owned handle is then returned as `Parser`.
    pub fn new<T: GuestParser>(val: T) -> Self {
      Self::type_guard::<T>();
      let val: _ParserRep<T> = Some(val);
      let ptr: *mut _ParserRep<T> =
      _rt::Box::into_raw(_rt::Box::new(val));
      unsafe {
        Self::from_handle(T::_resource_new(ptr.cast()))
      }
    }

    /// Gets access to the underlying `T` which represents this resource.
    pub fn get<T: GuestParser>(&self) -> &T {
      let ptr = unsafe { &*self.as_ptr::<T>() };
      ptr.as_ref().unwrap()
    }

    /// Gets mutable access to the underlying `T` which represents this
    /// resource.
    pub fn get_mut<T: GuestParser>(&mut self) -> &mut T {
      let ptr = unsafe { &mut *self.as_ptr::<T>() };
      ptr.as_mut().unwrap()
    }

    /// Consumes this resource and returns the underlying `T`.
    pub fn into_inner<T: GuestParser>(self) -> T {
      let ptr = unsafe { &mut *self.as_ptr::<T>() };
      ptr.take().unwrap()
    }

    #[doc(hidden)]
    pub unsafe fn from_handle(handle: u32) -> Self {
      Self {
        handle: unsafe { _rt::Resource::from_handle(handle) },
      }
    }

    #[doc(hidden)]
    pub fn take_handle(&self) -> u32 {
      _rt::Resource::take_handle(&self.handle)
    }

    #[doc(hidden)]
    pub fn handle(&self) -> u32 {
      _rt::Resource::handle(&self.handle)
    }

    // It's theoretically possible to implement the `GuestParser` trait twice
    // so guard against using it with two different types here.
    #[doc(hidden)]
    fn type_guard<T: 'static>() {
      use core::any::TypeId;
      static mut LAST_TYPE: Option<TypeId> = None;
      unsafe {
        assert!(!cfg!(target_feature = "atomics"));
        let id = TypeId::of::<T>();
        match LAST_TYPE {
          Some(ty) => assert!(ty == id, "cannot use two types with this resource type"),
          None => LAST_TYPE = Some(id),
        }
      }
    }

    #[doc(hidden)]
    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
      Self::type_guard::<T>();
      let _ = unsafe { _rt::Box::from_raw(handle as *mut _ParserRep<T>) };
    }

    fn as_ptr<T: GuestParser>(&self) -> *mut _ParserRep<T> {
      Parser::type_guard::<T>();
      T::_resource_rep(self.handle()).cast()
    }
  }

  /// A borrowed version of [`Parser`] which represents a borrowed value
  /// with the lifetime `'a`.
  #[derive(Debug)]
  #[repr(transparent)]
  pub struct ParserBorrow<'a> {
    rep: *mut u8,
    _marker: core::marker::PhantomData<&'a Parser>,
  }

  impl<'a> ParserBorrow<'a>{
    #[doc(hidden)]
    pub unsafe fn lift(rep: usize) -> Self {
      Self {
        rep: rep as *mut u8,
        _marker: core::marker::PhantomData,
      }
    }

    /// Gets access to the underlying `T` in this resource.
    pub fn get<T: GuestParser>(&self) -> &T {
      let ptr = unsafe { &mut *self.as_ptr::<T>() };
      ptr.as_ref().unwrap()
    }

    // NB: mutable access is not allowed due to the component model allowing
    // multiple borrows of the same resource.

    fn as_ptr<T: 'static>(&self) -> *mut _ParserRep<T> {
      Parser::type_guard::<T>();
      self.rep.cast()
    }
  }
  

  unsafe impl _rt::WasmResource for Parser{
    #[inline]
    unsafe fn drop(_handle: u32) {
      #[cfg(not(target_arch = "wasm32"))]
      unreachable!();

      #[cfg(target_arch = "wasm32")]
      {
        #[link(wasm_import_module = "[export]ritalin:parser/parsers@0.0.1")]
        unsafe extern "C" {
          #[link_name = "[resource-drop]parser"]
          fn drop(_: u32);
        }

        unsafe { drop(_handle) };
      }
    }
  }
  
  #[derive(Clone)]
  pub enum ParserError {
    SyntaxError(_rt::String),
    IncrementalEditError(_rt::String),
  }
  impl ::core::fmt::Debug for ParserError {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
      match self {
        ParserError::SyntaxError(e) => {
          f.debug_tuple("ParserError::SyntaxError").field(e).finish()
        }
        ParserError::IncrementalEditError(e) => {
          f.debug_tuple("ParserError::IncrementalEditError").field(e).finish()
        }
      }
    }
  }
  impl ::core::fmt::Display for ParserError {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
      write!(f, "{:?}", self)
    }
  }

  impl std::error::Error for ParserError {}
  #[repr(C)]
  #[derive(Clone, Copy)]
  pub struct EditScope {
    pub offset: u32,
    pub from_len: u32,
    pub to_len: u32,
  }
  impl ::core::fmt::Debug for EditScope {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
      f.debug_struct("EditScope").field("offset", &self.offset).field("from-len", &self.from_len).field("to-len", &self.to_len).finish()
    }
  }

  #[derive(Debug)]
  #[repr(transparent)]
  pub struct IncrementalParser{
    handle: _rt::Resource<IncrementalParser>,
  }

  type _IncrementalParserRep<T> = Option<T>;

  impl IncrementalParser{
    /// Creates a new resource from the specified representation.
    ///
    /// This function will create a new resource handle by moving `val` onto
    /// the heap and then passing that heap pointer to the component model to
    /// create a handle. The owned handle is then returned as `IncrementalParser`.
    pub fn new<T: GuestIncrementalParser>(val: T) -> Self {
      Self::type_guard::<T>();
      let val: _IncrementalParserRep<T> = Some(val);
      let ptr: *mut _IncrementalParserRep<T> =
      _rt::Box::into_raw(_rt::Box::new(val));
      unsafe {
        Self::from_handle(T::_resource_new(ptr.cast()))
      }
    }

    /// Gets access to the underlying `T` which represents this resource.
    pub fn get<T: GuestIncrementalParser>(&self) -> &T {
      let ptr = unsafe { &*self.as_ptr::<T>() };
      ptr.as_ref().unwrap()
    }

    /// Gets mutable access to the underlying `T` which represents this
    /// resource.
    pub fn get_mut<T: GuestIncrementalParser>(&mut self) -> &mut T {
      let ptr = unsafe { &mut *self.as_ptr::<T>() };
      ptr.as_mut().unwrap()
    }

    /// Consumes this resource and returns the underlying `T`.
    pub fn into_inner<T: GuestIncrementalParser>(self) -> T {
      let ptr = unsafe { &mut *self.as_ptr::<T>() };
      ptr.take().unwrap()
    }

    #[doc(hidden)]
    pub unsafe fn from_handle(handle: u32) -> Self {
      Self {
        handle: unsafe { _rt::Resource::from_handle(handle) },
      }
    }

    #[doc(hidden)]
    pub fn take_handle(&self) -> u32 {
      _rt::Resource::take_handle(&self.handle)
    }

    #[doc(hidden)]
    pub fn handle(&self) -> u32 {
      _rt::Resource::handle(&self.handle)
    }

    // It's theoretically possible to implement the `GuestIncrementalParser` trait twice
    // so guard against using it with two different types here.
    #[doc(hidden)]
    fn type_guard<T: 'static>() {
      use core::any::TypeId;
      static mut LAST_TYPE: Option<TypeId> = None;
      unsafe {
        assert!(!cfg!(target_feature = "atomics"));
        let id = TypeId::of::<T>();
        match LAST_TYPE {
          Some(ty) => assert!(ty == id, "cannot use two types with this resource type"),
          None => LAST_TYPE = Some(id),
        }
      }
    }

    #[doc(hidden)]
    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
      Self::type_guard::<T>();
      let _ = unsafe { _rt::Box::from_raw(handle as *mut _IncrementalParserRep<T>) };
    }

    fn as_ptr<T: GuestIncrementalParser>(&self) -> *mut _IncrementalParserRep<T> {
      IncrementalParser::type_guard::<T>();
      T::_resource_rep(self.handle()).cast()
    }
  }

  /// A borrowed version of [`IncrementalParser`] which represents a borrowed value
  /// with the lifetime `'a`.
  #[derive(Debug)]
  #[repr(transparent)]
  pub struct IncrementalParserBorrow<'a> {
    rep: *mut u8,
    _marker: core::marker::PhantomData<&'a IncrementalParser>,
  }

  impl<'a> IncrementalParserBorrow<'a>{
    #[doc(hidden)]
    pub unsafe fn lift(rep: usize) -> Self {
      Self {
        rep: rep as *mut u8,
        _marker: core::marker::PhantomData,
      }
    }

    /// Gets access to the underlying `T` in this resource.
    pub fn get<T: GuestIncrementalParser>(&self) -> &T {
      let ptr = unsafe { &mut *self.as_ptr::<T>() };
      ptr.as_ref().unwrap()
    }

    // NB: mutable access is not allowed due to the component model allowing
    // multiple borrows of the same resource.

    fn as_ptr<T: 'static>(&self) -> *mut _IncrementalParserRep<T> {
      IncrementalParser::type_guard::<T>();
      self.rep.cast()
    }
  }
  

  unsafe impl _rt::WasmResource for IncrementalParser{
    #[inline]
    unsafe fn drop(_handle: u32) {
      #[cfg(not(target_arch = "wasm32"))]
      unreachable!();

      #[cfg(target_arch = "wasm32")]
      {
        #[link(wasm_import_module = "[export]ritalin:parser/parsers@0.0.1")]
        unsafe extern "C" {
          #[link_name = "[resource-drop]incremental-parser"]
          fn drop(_: u32);
        }

        unsafe { drop(_handle) };
      }
    }
  }
  
  #[doc(hidden)]
  #[allow(non_snake_case)]
  pub unsafe fn _export_constructor_parser_cabi<T: GuestParser>() -> i32 {#[cfg(target_arch="wasm32")]
  _rt::run_ctors_once();let result0 = Parser::new(T::new());
  (result0).take_handle() as i32
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_parser_parse_cabi<T: GuestParser>(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let len0 = arg2;
let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
let result1 = T::parse(unsafe { ParserBorrow::lift(arg0 as u32 as usize) }.get(), _rt::string_lift(bytes0));
let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
match result1 {
  Ok(e) => { {
    *ptr2.add(0).cast::<u8>() = (0i32) as u8;
    *ptr2.add(::core::mem::size_of::<*const u8>()).cast::<i32>() = (e).take_handle() as i32;
  } },
  Err(e) => { {
    *ptr2.add(0).cast::<u8>() = (1i32) as u8;
    match e {
      ParserError::SyntaxError(e) => {
        *ptr2.add(::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
        let vec3 = (e.into_bytes()).into_boxed_slice();
        let ptr3 = vec3.as_ptr().cast::<u8>();
        let len3 = vec3.len();
        ::core::mem::forget(vec3);
        *ptr2.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
        *ptr2.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr3.cast_mut();
      },
      ParserError::IncrementalEditError(e) => {
        *ptr2.add(::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
        let vec4 = (e.into_bytes()).into_boxed_slice();
        let ptr4 = vec4.as_ptr().cast::<u8>();
        let len4 = vec4.len();
        ::core::mem::forget(vec4);
        *ptr2.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
        *ptr2.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr4.cast_mut();
      },
    }
  } },
};ptr2
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_parser_parse<T: GuestParser>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = i32::from(*arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>());
      match l1 {
        0 => {
          let l2 = *arg0.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l3 = *arg0.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l2, l3, 1);
        },
        _ => {
          let l4 = *arg0.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l5 = *arg0.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l4, l5, 1);
        },
      }
    },
  }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_parser_incremental_cabi<T: GuestParser>(arg0: *mut u8,arg1: i32,arg2: i32,arg3: i32,arg4: i32,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::incremental(unsafe { ParserBorrow::lift(arg0 as u32 as usize) }.get(), unsafe { super::super::super::super::exports::ritalin::parser::syntax::Tree::from_handle(arg1 as u32) }, EditScope{
  offset: arg2 as u32,
  from_len: arg3 as u32,
  to_len: arg4 as u32,
});
let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
match result0 {
  Ok(e) => { {
    *ptr1.add(0).cast::<u8>() = (0i32) as u8;
    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<i32>() = (e).take_handle() as i32;
  } },
  Err(e) => { {
    *ptr1.add(0).cast::<u8>() = (1i32) as u8;
    match e {
      ParserError::SyntaxError(e) => {
        *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
        let vec2 = (e.into_bytes()).into_boxed_slice();
        let ptr2 = vec2.as_ptr().cast::<u8>();
        let len2 = vec2.len();
        ::core::mem::forget(vec2);
        *ptr1.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
        *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr2.cast_mut();
      },
      ParserError::IncrementalEditError(e) => {
        *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
        let vec3 = (e.into_bytes()).into_boxed_slice();
        let ptr3 = vec3.as_ptr().cast::<u8>();
        let len3 = vec3.len();
        ::core::mem::forget(vec3);
        *ptr1.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
        *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr3.cast_mut();
      },
    }
  } },
};ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_parser_incremental<T: GuestParser>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = i32::from(*arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>());
      match l1 {
        0 => {
          let l2 = *arg0.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l3 = *arg0.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l2, l3, 1);
        },
        _ => {
          let l4 = *arg0.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l5 = *arg0.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l4, l5, 1);
        },
      }
    },
  }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_method_incremental_parser_parse_cabi<T: GuestIncrementalParser>(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let len0 = arg2;
let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
let result1 = T::parse(unsafe { IncrementalParserBorrow::lift(arg0 as u32 as usize) }.get(), _rt::string_lift(bytes0));
let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
match result1 {
  Ok(e) => { {
    *ptr2.add(0).cast::<u8>() = (0i32) as u8;
    *ptr2.add(::core::mem::size_of::<*const u8>()).cast::<i32>() = (e).take_handle() as i32;
  } },
  Err(e) => { {
    *ptr2.add(0).cast::<u8>() = (1i32) as u8;
    match e {
      ParserError::SyntaxError(e) => {
        *ptr2.add(::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
        let vec3 = (e.into_bytes()).into_boxed_slice();
        let ptr3 = vec3.as_ptr().cast::<u8>();
        let len3 = vec3.len();
        ::core::mem::forget(vec3);
        *ptr2.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
        *ptr2.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr3.cast_mut();
      },
      ParserError::IncrementalEditError(e) => {
        *ptr2.add(::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
        let vec4 = (e.into_bytes()).into_boxed_slice();
        let ptr4 = vec4.as_ptr().cast::<u8>();
        let len4 = vec4.len();
        ::core::mem::forget(vec4);
        *ptr2.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
        *ptr2.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr4.cast_mut();
      },
    }
  } },
};ptr2
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_method_incremental_parser_parse<T: GuestIncrementalParser>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = i32::from(*arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>());
      match l1 {
        0 => {
          let l2 = *arg0.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l3 = *arg0.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l2, l3, 1);
        },
        _ => {
          let l4 = *arg0.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l5 = *arg0.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l4, l5, 1);
        },
      }
    },
  }
}
pub trait Guest {
  type Parser: GuestParser;
  type IncrementalParser: GuestIncrementalParser;
}
pub trait GuestParser: 'static {

  #[doc(hidden)]
  unsafe fn _resource_new(val: *mut u8) -> u32
  where Self: Sized
  {
    #[cfg(not(target_arch = "wasm32"))]
    {
      let _ = val;
      unreachable!();
    }

    #[cfg(target_arch = "wasm32")]
    {
      #[link(wasm_import_module = "[export]ritalin:parser/parsers@0.0.1")]
      unsafe extern "C" {
        #[link_name = "[resource-new]parser"]
        fn new(_: *mut u8) -> u32;
      }
      unsafe { new(val) }
    }
  }

  #[doc(hidden)]
  fn _resource_rep(handle: u32) -> *mut u8
  where Self: Sized
  {
    #[cfg(not(target_arch = "wasm32"))]
    {
      let _ = handle;
      unreachable!();
    }

    #[cfg(target_arch = "wasm32")]
    {
      #[link(wasm_import_module = "[export]ritalin:parser/parsers@0.0.1")]
      unsafe extern "C" {
        #[link_name = "[resource-rep]parser"]
        fn rep(_: u32) -> *mut u8;
      }
      unsafe {
        rep(handle)
      }
    }
  }

  
  fn new() -> Self;
  fn parse(&self,source: _rt::String,) -> Result<SyntaxTree,ParserError>;
  fn incremental(&self,tree: SyntaxTree,edit: EditScope,) -> Result<IncrementalParser,ParserError>;
}
pub trait GuestIncrementalParser: 'static {

  #[doc(hidden)]
  unsafe fn _resource_new(val: *mut u8) -> u32
  where Self: Sized
  {
    #[cfg(not(target_arch = "wasm32"))]
    {
      let _ = val;
      unreachable!();
    }

    #[cfg(target_arch = "wasm32")]
    {
      #[link(wasm_import_module = "[export]ritalin:parser/parsers@0.0.1")]
      unsafe extern "C" {
        #[link_name = "[resource-new]incremental-parser"]
        fn new(_: *mut u8) -> u32;
      }
      unsafe { new(val) }
    }
  }

  #[doc(hidden)]
  fn _resource_rep(handle: u32) -> *mut u8
  where Self: Sized
  {
    #[cfg(not(target_arch = "wasm32"))]
    {
      let _ = handle;
      unreachable!();
    }

    #[cfg(target_arch = "wasm32")]
    {
      #[link(wasm_import_module = "[export]ritalin:parser/parsers@0.0.1")]
      unsafe extern "C" {
        #[link_name = "[resource-rep]incremental-parser"]
        fn rep(_: u32) -> *mut u8;
      }
      unsafe {
        rep(handle)
      }
    }
  }

  
  fn parse(&self,source: _rt::String,) -> Result<SyntaxTree,ParserError>;
}
#[doc(hidden)]

macro_rules! __export_ritalin_parser_parsers_0_0_1_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[unsafe(export_name = "ritalin:parser/parsers@0.0.1#[constructor]parser")]
    unsafe extern "C" fn export_constructor_parser() -> i32 {
      unsafe { $($path_to_types)*::_export_constructor_parser_cabi::<<$ty as $($path_to_types)*::Guest>::Parser>() }
    }
    #[unsafe(export_name = "ritalin:parser/parsers@0.0.1#[method]parser.parse")]
    unsafe extern "C" fn export_method_parser_parse(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_method_parser_parse_cabi::<<$ty as $($path_to_types)*::Guest>::Parser>(arg0, arg1, arg2) }
    }
    #[unsafe(export_name = "cabi_post_ritalin:parser/parsers@0.0.1#[method]parser.parse")]
    unsafe extern "C" fn _post_return_method_parser_parse(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_method_parser_parse::<<$ty as $($path_to_types)*::Guest>::Parser>(arg0) }
    }
    #[unsafe(export_name = "ritalin:parser/parsers@0.0.1#[method]parser.incremental")]
    unsafe extern "C" fn export_method_parser_incremental(arg0: *mut u8,arg1: i32,arg2: i32,arg3: i32,arg4: i32,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_method_parser_incremental_cabi::<<$ty as $($path_to_types)*::Guest>::Parser>(arg0, arg1, arg2, arg3, arg4) }
    }
    #[unsafe(export_name = "cabi_post_ritalin:parser/parsers@0.0.1#[method]parser.incremental")]
    unsafe extern "C" fn _post_return_method_parser_incremental(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_method_parser_incremental::<<$ty as $($path_to_types)*::Guest>::Parser>(arg0) }
    }
    #[unsafe(export_name = "ritalin:parser/parsers@0.0.1#[method]incremental-parser.parse")]
    unsafe extern "C" fn export_method_incremental_parser_parse(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_method_incremental_parser_parse_cabi::<<$ty as $($path_to_types)*::Guest>::IncrementalParser>(arg0, arg1, arg2) }
    }
    #[unsafe(export_name = "cabi_post_ritalin:parser/parsers@0.0.1#[method]incremental-parser.parse")]
    unsafe extern "C" fn _post_return_method_incremental_parser_parse(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_method_incremental_parser_parse::<<$ty as $($path_to_types)*::Guest>::IncrementalParser>(arg0) }
    }

    const _: () = {
      #[doc(hidden)]
      #[unsafe(export_name = "ritalin:parser/parsers@0.0.1#[dtor]parser")]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        unsafe {
          $($path_to_types)*::Parser::dtor::<
          <$ty as $($path_to_types)*::Guest>::Parser
          >(rep)
        }
      }
    };
    

    const _: () = {
      #[doc(hidden)]
      #[unsafe(export_name = "ritalin:parser/parsers@0.0.1#[dtor]incremental-parser")]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        unsafe {
          $($path_to_types)*::IncrementalParser::dtor::<
          <$ty as $($path_to_types)*::Guest>::IncrementalParser
          >(rep)
        }
      }
    };
    
  };);
}
#[doc(hidden)]
pub(crate) use __export_ritalin_parser_parsers_0_0_1_cabi;

#[cfg_attr(target_pointer_width="64", repr(align(8)))]
#[cfg_attr(target_pointer_width="32", repr(align(4)))]
struct _RetArea([::core::mem::MaybeUninit::<u8>; 4*::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 4*::core::mem::size_of::<*const u8>()]);

}

}
}
}
mod _rt {
  #![allow(dead_code, clippy::all)]


  use core::fmt;
  use core::marker;
  use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

  /// A type which represents a component model resource, either imported or
  /// exported into this component.
  ///
  /// This is a low-level wrapper which handles the lifetime of the resource
  /// (namely this has a destructor). The `T` provided defines the component model
  /// intrinsics that this wrapper uses.
  ///
  /// One of the chief purposes of this type is to provide `Deref` implementations
  /// to access the underlying data when it is owned.
  ///
  /// This type is primarily used in generated code for exported and imported
  /// resources.
  #[repr(transparent)]
  pub struct Resource<T: WasmResource> {
    // NB: This would ideally be `u32` but it is not. The fact that this has
    // interior mutability is not exposed in the API of this type except for the
    // `take_handle` method which is supposed to in theory be private.
    //
    // This represents, almost all the time, a valid handle value. When it's
    // invalid it's stored as `u32::MAX`.
    handle: AtomicU32,
    _marker: marker::PhantomData<T>,
  }

  /// A trait which all wasm resources implement, namely providing the ability to
  /// drop a resource.
  ///
  /// This generally is implemented by generated code, not user-facing code.
  #[allow(clippy::missing_safety_doc)]
  pub unsafe trait WasmResource {
    /// Invokes the `[resource-drop]...` intrinsic.
    unsafe fn drop(handle: u32);
  }

  impl<T: WasmResource> Resource<T> {
    #[doc(hidden)]
    pub unsafe fn from_handle(handle: u32) -> Self {
      debug_assert!(handle != u32::MAX);
      Self {
        handle: AtomicU32::new(handle),
        _marker: marker::PhantomData,
      }
    }

    /// Takes ownership of the handle owned by `resource`.
    ///
    /// Note that this ideally would be `into_handle` taking `Resource<T>` by
    /// ownership. The code generator does not enable that in all situations,
    /// unfortunately, so this is provided instead.
    ///
    /// Also note that `take_handle` is in theory only ever called on values
    /// owned by a generated function. For example a generated function might
    /// take `Resource<T>` as an argument but then call `take_handle` on a
    /// reference to that argument. In that sense the dynamic nature of
    /// `take_handle` should only be exposed internally to generated code, not
    /// to user code.
    #[doc(hidden)]
    pub fn take_handle(resource: &Resource<T>) -> u32 {
      resource.handle.swap(u32::MAX, Relaxed)
    }

    #[doc(hidden)]
    pub fn handle(resource: &Resource<T>) -> u32 {
      resource.handle.load(Relaxed)
    }
  }

  impl<T: WasmResource> fmt::Debug for Resource<T> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      f.debug_struct("Resource")
      .field("handle", &self.handle)
      .finish()
    }
  }

  impl<T: WasmResource> Drop for Resource<T> {
    fn drop(&mut self) {
      unsafe {
        match self.handle.load(Relaxed) {
          // If this handle was "taken" then don't do anything in the
          // destructor.
          u32::MAX => {}

          // ... but otherwise do actually destroy it with the imported
          // component model intrinsic as defined through `T`.
          other => T::drop(other),
        }
      }
    }
  }
  pub use alloc_crate::boxed::Box;

  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen::rt::run_ctors_once();
  }
  
  pub fn as_i32<T: AsI32>(t: T) -> i32 {
    t.as_i32()
  }

  pub trait AsI32 {
    fn as_i32(self) -> i32;
  }

  impl<'a, T: Copy + AsI32> AsI32 for &'a T {
    fn as_i32(self) -> i32 {
      (*self).as_i32()
    }
  }
  
  impl AsI32 for i32 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u32 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for i16 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u16 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for i8 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u8 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for char {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for usize {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  pub fn as_i64<T: AsI64>(t: T) -> i64 {
    t.as_i64()
  }

  pub trait AsI64 {
    fn as_i64(self) -> i64;
  }

  impl<'a, T: Copy + AsI64> AsI64 for &'a T {
    fn as_i64(self) -> i64 {
      (*self).as_i64()
    }
  }
  
  impl AsI64 for i64 {
    #[inline]
    fn as_i64(self) -> i64 {
      self as i64
    }
  }
  
  impl AsI64 for u64 {
    #[inline]
    fn as_i64(self) -> i64 {
      self as i64
    }
  }
  pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
    if size == 0 {
      return;
    }
    let layout = alloc::Layout::from_size_align_unchecked(size, align);
    alloc::dealloc(ptr, layout);
  }
  pub use alloc_crate::string::String;
  pub use alloc_crate::alloc;
  pub use alloc_crate::vec::Vec;
  pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
    if cfg!(debug_assertions) {
      String::from_utf8(bytes).unwrap()
    } else {
      String::from_utf8_unchecked(bytes)
    }
  }
  extern crate alloc as alloc_crate;
}

/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_parser_world_impl {
  ($ty:ident) => (crate::bindings::parser_world::export!($ty with_types_in crate::bindings::parser_world););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::ritalin::parser::syntax::__export_ritalin_parser_syntax_0_0_1_cabi!($ty with_types_in $($path_to_types_root)*::exports::ritalin::parser::syntax);
  $($path_to_types_root)*::exports::ritalin::parser::parsers::__export_ritalin_parser_parsers_0_0_1_cabi!($ty with_types_in $($path_to_types_root)*::exports::ritalin::parser::parsers);
  )
}
#[doc(inline)]
pub(crate) use __export_parser_world_impl as export;

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.41.0:ritalin:parser@0.0.1:parser-world:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1628] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xd9\x0b\x01A\x02\x01\
A\x0a\x01B\x0c\x01r\x04\x02idy\x04texts\x0ais-keyword\x7f\x0bis-terminal\x7f\x04\
\0\x0bsyntax-kind\x03\0\0\x01ks\x01r\x04\x04kind\x01\x06offsety\x03leny\x05value\
\x02\x04\0\x0atoken-item\x03\0\x03\x01p\x04\x01k\x05\x01r\x03\x07leading\x06\x04\
main\x04\x08trailing\x06\x04\0\x05token\x03\0\x07\x01k\x08\x01r\x02\x0anext-inde\
xy\x09lookahead\x09\x04\0\x0dscanner-scope\x03\0\x0a\x03\0\x1britalin:scanner/ty\
pes@0.0.1\x05\0\x01B\x0c\x01r\x04\x02idy\x04texts\x0ais-keyword\x7f\x0bis-termin\
al\x7f\x04\0\x0bsyntax-kind\x03\0\0\x01ks\x01r\x04\x04kind\x01\x06offsety\x03len\
y\x05value\x02\x04\0\x0atoken-item\x03\0\x03\x01p\x04\x01k\x05\x01r\x03\x07leadi\
ng\x06\x04main\x04\x08trailing\x06\x04\0\x05token\x03\0\x07\x01k\x08\x01r\x02\x0a\
next-indexy\x09lookahead\x09\x04\0\x0dscanner-scope\x03\0\x0a\x04\0\x1britalin:s\
canner/types@0.0.1\x05\x01\x02\x03\0\x01\x0bsyntax-kind\x01B\x1d\x02\x03\x02\x01\
\x02\x04\0\x0bsyntax-kind\x03\0\0\x04\0\x04tree\x03\x01\x04\0\x04node\x03\x01\x01\
m\x07\x09token-set\x0dleading-token\x0etrailing-token\x0amain-token\x04node\x05e\
rror\x0bfatal-error\x04\0\x09node-type\x03\0\x04\x01m\x02\x06delete\x05shift\x04\
\0\x0frecovery-status\x03\0\x06\x01k\x07\x01r\x04\x04kind\x01\x09node-type\x05\x05\
statew\x08recovery\x08\x04\0\x08metadata\x03\0\x09\x01h\x02\x01i\x03\x01@\x01\x04\
self\x0b\0\x0c\x04\0\x11[method]tree.root\x01\x0d\x01h\x03\x01@\x01\x04self\x0e\0\
\x0a\x04\0\x15[method]node.metadata\x01\x0f\x01@\x01\x04self\x0e\0y\x04\0\x19[me\
thod]node.offset-start\x01\x10\x04\0\x17[method]node.offset-end\x01\x10\x01ks\x01\
@\x01\x04self\x0e\0\x11\x04\0\x12[method]node.value\x01\x12\x01p\x0c\x01@\x01\x04\
self\x0e\0\x13\x04\0\x1b[method]node.leading-trivia\x01\x14\x04\0\x1b[method]nod\
e.traling-trivia\x01\x14\x04\0\x15[method]node.children\x01\x14\x04\0\x1britalin\
:parser/syntax@0.0.1\x05\x03\x02\x03\0\x02\x04tree\x01B\x18\x02\x03\x02\x01\x04\x04\
\0\x04tree\x03\0\0\x04\0\x0bsyntax-tree\x03\0\x01\x04\0\x06parser\x03\x01\x01q\x02\
\x0csyntax-error\x01s\0\x16incremental-edit-error\x01s\0\x04\0\x0cparser-error\x03\
\0\x04\x01r\x03\x06offsety\x08from-leny\x06to-leny\x04\0\x0aedit-scope\x03\0\x06\
\x04\0\x12incremental-parser\x03\x01\x01i\x03\x01@\0\0\x09\x04\0\x13[constructor\
]parser\x01\x0a\x01h\x03\x01i\x02\x01j\x01\x0c\x01\x05\x01@\x02\x04self\x0b\x06s\
ources\0\x0d\x04\0\x14[method]parser.parse\x01\x0e\x01i\x08\x01j\x01\x0f\x01\x05\
\x01@\x03\x04self\x0b\x04tree\x0c\x04edit\x07\0\x10\x04\0\x1a[method]parser.incr\
emental\x01\x11\x01h\x08\x01@\x02\x04self\x12\x06sources\0\x0d\x04\0\x20[method]\
incremental-parser.parse\x01\x13\x04\0\x1critalin:parser/parsers@0.0.1\x05\x05\x04\
\0!ritalin:parser/parser-world@0.0.1\x04\0\x0b\x12\x01\0\x0cparser-world\x03\0\0\
\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bind\
gen-rust\x060.41.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

