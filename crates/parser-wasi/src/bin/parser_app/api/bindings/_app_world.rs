// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * default-bindings-module: "crate::bindings::app_world"
#[allow(dead_code, clippy::all)]
pub mod ritalin {
  pub mod parser {

    #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
    pub mod syntax {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      pub type SyntaxKind = super::super::super::ritalin::scanner::types::SyntaxKind;

      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Tree{
        handle: _rt::Resource<Tree>,
      }

      impl Tree{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: unsafe { _rt::Resource::from_handle(handle) },
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }
      

      unsafe impl _rt::WasmResource for Tree{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "ritalin:parser/syntax@0.0.1")]
            unsafe extern "C" {
              #[link_name = "[resource-drop]tree"]
              fn drop(_: u32);
            }

            unsafe { drop(_handle) };
          }
        }
      }
      

      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Node{
        handle: _rt::Resource<Node>,
      }

      impl Node{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: unsafe { _rt::Resource::from_handle(handle) },
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }
      

      unsafe impl _rt::WasmResource for Node{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "ritalin:parser/syntax@0.0.1")]
            unsafe extern "C" {
              #[link_name = "[resource-drop]node"]
              fn drop(_: u32);
            }

            unsafe { drop(_handle) };
          }
        }
      }
      
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
      pub enum NodeType {
        TokenSet,
        LeadingToken,
        TrailingToken,
        MainToken,
        Node,
        Error,
        FatalError,
      }
      impl ::core::fmt::Debug for NodeType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            NodeType::TokenSet => {
              f.debug_tuple("NodeType::TokenSet").finish()
            }
            NodeType::LeadingToken => {
              f.debug_tuple("NodeType::LeadingToken").finish()
            }
            NodeType::TrailingToken => {
              f.debug_tuple("NodeType::TrailingToken").finish()
            }
            NodeType::MainToken => {
              f.debug_tuple("NodeType::MainToken").finish()
            }
            NodeType::Node => {
              f.debug_tuple("NodeType::Node").finish()
            }
            NodeType::Error => {
              f.debug_tuple("NodeType::Error").finish()
            }
            NodeType::FatalError => {
              f.debug_tuple("NodeType::FatalError").finish()
            }
          }
        }
      }

      impl NodeType{
        #[doc(hidden)]
        pub unsafe fn _lift(val: u8) -> NodeType{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }

          match val {
            0 => NodeType::TokenSet,
            1 => NodeType::LeadingToken,
            2 => NodeType::TrailingToken,
            3 => NodeType::MainToken,
            4 => NodeType::Node,
            5 => NodeType::Error,
            6 => NodeType::FatalError,

            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
      pub enum RecoveryStatus {
        Delete,
        Shift,
      }
      impl ::core::fmt::Debug for RecoveryStatus {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            RecoveryStatus::Delete => {
              f.debug_tuple("RecoveryStatus::Delete").finish()
            }
            RecoveryStatus::Shift => {
              f.debug_tuple("RecoveryStatus::Shift").finish()
            }
          }
        }
      }

      impl RecoveryStatus{
        #[doc(hidden)]
        pub unsafe fn _lift(val: u8) -> RecoveryStatus{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }

          match val {
            0 => RecoveryStatus::Delete,
            1 => RecoveryStatus::Shift,

            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      #[derive(Clone)]
      pub struct Metadata {
        pub kind: SyntaxKind,
        pub node_type: NodeType,
        pub state: u64,
        pub recovery: Option<RecoveryStatus>,
      }
      impl ::core::fmt::Debug for Metadata {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Metadata").field("kind", &self.kind).field("node-type", &self.node_type).field("state", &self.state).field("recovery", &self.recovery).finish()
        }
      }
      impl Tree {
        #[allow(unused_unsafe, clippy::all)]
        pub fn root(&self,) -> Node{
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "ritalin:parser/syntax@0.0.1")]
            unsafe extern "C" {
              #[link_name = "[method]tree.root"]
              fn wit_import0(_: i32, ) -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            unsafe extern "C" fn wit_import0(_: i32, ) -> i32{ unreachable!() }
            let ret = unsafe { wit_import0((self).handle() as i32) };
            unsafe { Node::from_handle(ret as u32) }
          }
        }
      }
      impl Node {
        #[allow(unused_unsafe, clippy::all)]
        pub fn metadata(&self,) -> Metadata{
          unsafe {

            #[repr(align(8))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 24+4*::core::mem::size_of::<*const u8>()]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24+4*::core::mem::size_of::<*const u8>()]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "ritalin:parser/syntax@0.0.1")]
            unsafe extern "C" {
              #[link_name = "[method]node.metadata"]
              fn wit_import1(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            unsafe extern "C" fn wit_import1(_: i32, _: *mut u8, ){ unreachable!() }
            unsafe { wit_import1((self).handle() as i32, ptr0) };
            let l2 = *ptr0.add(0).cast::<i32>();
            let l3 = *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
            let l4 = *ptr0.add(2*::core::mem::size_of::<*const u8>()).cast::<usize>();
            let len5 = l4;
            let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
            let l6 = i32::from(*ptr0.add(3*::core::mem::size_of::<*const u8>()).cast::<u8>());
            let l7 = i32::from(*ptr0.add(1+3*::core::mem::size_of::<*const u8>()).cast::<u8>());
            let l8 = i32::from(*ptr0.add(4*::core::mem::size_of::<*const u8>()).cast::<u8>());
            let l9 = *ptr0.add(8+4*::core::mem::size_of::<*const u8>()).cast::<i64>();
            let l10 = i32::from(*ptr0.add(16+4*::core::mem::size_of::<*const u8>()).cast::<u8>());
            let result12 = Metadata{
              kind: super::super::super::ritalin::scanner::types::SyntaxKind{
                id: l2 as u32,
                text: _rt::string_lift(bytes5),
                is_keyword: _rt::bool_lift(l6 as u8),
                is_terminal: _rt::bool_lift(l7 as u8),
              },
              node_type: NodeType::_lift(l8 as u8),
              state: l9 as u64,
              recovery: match l10 {
                0 => None,
                1 => {
                  let e = {
                    let l11 = i32::from(*ptr0.add(17+4*::core::mem::size_of::<*const u8>()).cast::<u8>());

                    RecoveryStatus::_lift(l11 as u8)
                  };
                  Some(e)
                }
                _ => _rt::invalid_enum_discriminant(),
              },
            };
            result12
          }
        }
      }
      impl Node {
        #[allow(unused_unsafe, clippy::all)]
        pub fn offset_start(&self,) -> u32{
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "ritalin:parser/syntax@0.0.1")]
            unsafe extern "C" {
              #[link_name = "[method]node.offset-start"]
              fn wit_import0(_: i32, ) -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            unsafe extern "C" fn wit_import0(_: i32, ) -> i32{ unreachable!() }
            let ret = unsafe { wit_import0((self).handle() as i32) };
            ret as u32
          }
        }
      }
      impl Node {
        #[allow(unused_unsafe, clippy::all)]
        pub fn offset_end(&self,) -> u32{
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "ritalin:parser/syntax@0.0.1")]
            unsafe extern "C" {
              #[link_name = "[method]node.offset-end"]
              fn wit_import0(_: i32, ) -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            unsafe extern "C" fn wit_import0(_: i32, ) -> i32{ unreachable!() }
            let ret = unsafe { wit_import0((self).handle() as i32) };
            ret as u32
          }
        }
      }
      impl Node {
        #[allow(unused_unsafe, clippy::all)]
        pub fn value(&self,) -> Option<_rt::String>{
          unsafe {

            #[cfg_attr(target_pointer_width="64", repr(align(8)))]
            #[cfg_attr(target_pointer_width="32", repr(align(4)))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 3*::core::mem::size_of::<*const u8>()]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 3*::core::mem::size_of::<*const u8>()]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "ritalin:parser/syntax@0.0.1")]
            unsafe extern "C" {
              #[link_name = "[method]node.value"]
              fn wit_import1(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            unsafe extern "C" fn wit_import1(_: i32, _: *mut u8, ){ unreachable!() }
            unsafe { wit_import1((self).handle() as i32, ptr0) };
            let l2 = i32::from(*ptr0.add(0).cast::<u8>());
            let result6 = match l2 {
              0 => None,
              1 => {
                let e = {
                  let l3 = *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                  let l4 = *ptr0.add(2*::core::mem::size_of::<*const u8>()).cast::<usize>();
                  let len5 = l4;
                  let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                  _rt::string_lift(bytes5)
                };
                Some(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            };
            result6
          }
        }
      }
      impl Node {
        #[allow(unused_unsafe, clippy::all)]
        pub fn leading_trivia(&self,) -> _rt::Vec::<Node>{
          unsafe {

            #[cfg_attr(target_pointer_width="64", repr(align(8)))]
            #[cfg_attr(target_pointer_width="32", repr(align(4)))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2*::core::mem::size_of::<*const u8>()]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2*::core::mem::size_of::<*const u8>()]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "ritalin:parser/syntax@0.0.1")]
            unsafe extern "C" {
              #[link_name = "[method]node.leading-trivia"]
              fn wit_import1(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            unsafe extern "C" fn wit_import1(_: i32, _: *mut u8, ){ unreachable!() }
            unsafe { wit_import1((self).handle() as i32, ptr0) };
            let l2 = *ptr0.add(0).cast::<*mut u8>();
            let l3 = *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
            let base5 = l2;
            let len5 = l3;
            let mut result5 = _rt::Vec::with_capacity(len5);
            for i in 0..len5 {
              let base = base5.add(i * 4);
              let e5 = {
                let l4 = *base.add(0).cast::<i32>();

                unsafe { Node::from_handle(l4 as u32) }
              };
              result5.push(e5);
            }
            _rt::cabi_dealloc(base5, len5 * 4, 4);
            let result6 = result5;
            result6
          }
        }
      }
      impl Node {
        #[allow(unused_unsafe, clippy::all)]
        pub fn traling_trivia(&self,) -> _rt::Vec::<Node>{
          unsafe {

            #[cfg_attr(target_pointer_width="64", repr(align(8)))]
            #[cfg_attr(target_pointer_width="32", repr(align(4)))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2*::core::mem::size_of::<*const u8>()]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2*::core::mem::size_of::<*const u8>()]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "ritalin:parser/syntax@0.0.1")]
            unsafe extern "C" {
              #[link_name = "[method]node.traling-trivia"]
              fn wit_import1(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            unsafe extern "C" fn wit_import1(_: i32, _: *mut u8, ){ unreachable!() }
            unsafe { wit_import1((self).handle() as i32, ptr0) };
            let l2 = *ptr0.add(0).cast::<*mut u8>();
            let l3 = *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
            let base5 = l2;
            let len5 = l3;
            let mut result5 = _rt::Vec::with_capacity(len5);
            for i in 0..len5 {
              let base = base5.add(i * 4);
              let e5 = {
                let l4 = *base.add(0).cast::<i32>();

                unsafe { Node::from_handle(l4 as u32) }
              };
              result5.push(e5);
            }
            _rt::cabi_dealloc(base5, len5 * 4, 4);
            let result6 = result5;
            result6
          }
        }
      }
      impl Node {
        #[allow(unused_unsafe, clippy::all)]
        pub fn children(&self,) -> _rt::Vec::<Node>{
          unsafe {

            #[cfg_attr(target_pointer_width="64", repr(align(8)))]
            #[cfg_attr(target_pointer_width="32", repr(align(4)))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 2*::core::mem::size_of::<*const u8>()]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2*::core::mem::size_of::<*const u8>()]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "ritalin:parser/syntax@0.0.1")]
            unsafe extern "C" {
              #[link_name = "[method]node.children"]
              fn wit_import1(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            unsafe extern "C" fn wit_import1(_: i32, _: *mut u8, ){ unreachable!() }
            unsafe { wit_import1((self).handle() as i32, ptr0) };
            let l2 = *ptr0.add(0).cast::<*mut u8>();
            let l3 = *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
            let base5 = l2;
            let len5 = l3;
            let mut result5 = _rt::Vec::with_capacity(len5);
            for i in 0..len5 {
              let base = base5.add(i * 4);
              let e5 = {
                let l4 = *base.add(0).cast::<i32>();

                unsafe { Node::from_handle(l4 as u32) }
              };
              result5.push(e5);
            }
            _rt::cabi_dealloc(base5, len5 * 4, 4);
            let result6 = result5;
            result6
          }
        }
      }

    }


    #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
    pub mod parsers {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      pub type Tree = super::super::super::ritalin::parser::syntax::Tree;
      pub type SyntaxTree = Tree;

      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Parser{
        handle: _rt::Resource<Parser>,
      }

      impl Parser{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: unsafe { _rt::Resource::from_handle(handle) },
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }
      

      unsafe impl _rt::WasmResource for Parser{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "ritalin:parser/parsers@0.0.1")]
            unsafe extern "C" {
              #[link_name = "[resource-drop]parser"]
              fn drop(_: u32);
            }

            unsafe { drop(_handle) };
          }
        }
      }
      
      #[derive(Clone)]
      pub enum ParserError {
        SyntaxError(_rt::String),
        IncrementalEditError(_rt::String),
      }
      impl ::core::fmt::Debug for ParserError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            ParserError::SyntaxError(e) => {
              f.debug_tuple("ParserError::SyntaxError").field(e).finish()
            }
            ParserError::IncrementalEditError(e) => {
              f.debug_tuple("ParserError::IncrementalEditError").field(e).finish()
            }
          }
        }
      }
      impl ::core::fmt::Display for ParserError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{:?}", self)
        }
      }

      impl std::error::Error for ParserError {}
      #[repr(C)]
      #[derive(Clone, Copy)]
      pub struct EditScope {
        pub offset: u32,
        pub from_len: u32,
        pub to_len: u32,
      }
      impl ::core::fmt::Debug for EditScope {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("EditScope").field("offset", &self.offset).field("from-len", &self.from_len).field("to-len", &self.to_len).finish()
        }
      }

      #[derive(Debug)]
      #[repr(transparent)]
      pub struct IncrementalParser{
        handle: _rt::Resource<IncrementalParser>,
      }

      impl IncrementalParser{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: unsafe { _rt::Resource::from_handle(handle) },
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }
      

      unsafe impl _rt::WasmResource for IncrementalParser{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "ritalin:parser/parsers@0.0.1")]
            unsafe extern "C" {
              #[link_name = "[resource-drop]incremental-parser"]
              fn drop(_: u32);
            }

            unsafe { drop(_handle) };
          }
        }
      }
      
      impl Parser {
        #[allow(unused_unsafe, clippy::all)]
        pub fn new() -> Self{
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "ritalin:parser/parsers@0.0.1")]
            unsafe extern "C" {
              #[link_name = "[constructor]parser"]
              fn wit_import0() -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            unsafe extern "C" fn wit_import0() -> i32{ unreachable!() }
            let ret = unsafe { wit_import0() };
            unsafe { Parser::from_handle(ret as u32) }
          }
        }
      }
      impl Parser {
        #[allow(unused_unsafe, clippy::all)]
        pub fn parse(&self,source: &str,) -> Result<SyntaxTree,ParserError>{
          unsafe {

            #[cfg_attr(target_pointer_width="64", repr(align(8)))]
            #[cfg_attr(target_pointer_width="32", repr(align(4)))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 4*::core::mem::size_of::<*const u8>()]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 4*::core::mem::size_of::<*const u8>()]);
            let vec0 = source;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "ritalin:parser/parsers@0.0.1")]
            unsafe extern "C" {
              #[link_name = "[method]parser.parse"]
              fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            unsafe extern "C" fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            unsafe { wit_import2((self).handle() as i32, ptr0.cast_mut(), len0, ptr1) };
            let l3 = i32::from(*ptr1.add(0).cast::<u8>());
            let result13 = match l3 {
              0 => {
                let e = {
                  let l4 = *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<i32>();

                  unsafe { super::super::super::ritalin::parser::syntax::Tree::from_handle(l4 as u32) }
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l5 = i32::from(*ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>());
                  let v12 = match l5 {
                    0 => {
                      let e12 = {
                        let l6 = *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                        let l7 = *ptr1.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
                        let len8 = l7;
                        let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                        _rt::string_lift(bytes8)
                      };
                      ParserError::SyntaxError(e12)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      let e12 = {
                        let l9 = *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                        let l10 = *ptr1.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
                        let len11 = l10;
                        let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                        _rt::string_lift(bytes11)
                      };
                      ParserError::IncrementalEditError(e12)
                    }
                  };

                  v12
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            };
            result13
          }
        }
      }
      impl Parser {
        #[allow(unused_unsafe, clippy::all)]
        pub fn incremental(&self,tree: SyntaxTree,edit: EditScope,) -> Result<IncrementalParser,ParserError>{
          unsafe {

            #[cfg_attr(target_pointer_width="64", repr(align(8)))]
            #[cfg_attr(target_pointer_width="32", repr(align(4)))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 4*::core::mem::size_of::<*const u8>()]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 4*::core::mem::size_of::<*const u8>()]);
            let EditScope{ offset:offset0, from_len:from_len0, to_len:to_len0, } = edit;
            let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "ritalin:parser/parsers@0.0.1")]
            unsafe extern "C" {
              #[link_name = "[method]parser.incremental"]
              fn wit_import2(_: i32, _: i32, _: i32, _: i32, _: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            unsafe extern "C" fn wit_import2(_: i32, _: i32, _: i32, _: i32, _: i32, _: *mut u8, ){ unreachable!() }
            unsafe { wit_import2((self).handle() as i32, (&tree).take_handle() as i32, _rt::as_i32(offset0), _rt::as_i32(from_len0), _rt::as_i32(to_len0), ptr1) };
            let l3 = i32::from(*ptr1.add(0).cast::<u8>());
            let result13 = match l3 {
              0 => {
                let e = {
                  let l4 = *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<i32>();

                  unsafe { IncrementalParser::from_handle(l4 as u32) }
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l5 = i32::from(*ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>());
                  let v12 = match l5 {
                    0 => {
                      let e12 = {
                        let l6 = *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                        let l7 = *ptr1.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
                        let len8 = l7;
                        let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                        _rt::string_lift(bytes8)
                      };
                      ParserError::SyntaxError(e12)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      let e12 = {
                        let l9 = *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                        let l10 = *ptr1.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
                        let len11 = l10;
                        let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                        _rt::string_lift(bytes11)
                      };
                      ParserError::IncrementalEditError(e12)
                    }
                  };

                  v12
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            };
            result13
          }
        }
      }
      impl IncrementalParser {
        #[allow(unused_unsafe, clippy::all)]
        pub fn parse(&self,source: &str,) -> Result<SyntaxTree,ParserError>{
          unsafe {

            #[cfg_attr(target_pointer_width="64", repr(align(8)))]
            #[cfg_attr(target_pointer_width="32", repr(align(4)))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 4*::core::mem::size_of::<*const u8>()]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 4*::core::mem::size_of::<*const u8>()]);
            let vec0 = source;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "ritalin:parser/parsers@0.0.1")]
            unsafe extern "C" {
              #[link_name = "[method]incremental-parser.parse"]
              fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            unsafe extern "C" fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            unsafe { wit_import2((self).handle() as i32, ptr0.cast_mut(), len0, ptr1) };
            let l3 = i32::from(*ptr1.add(0).cast::<u8>());
            let result13 = match l3 {
              0 => {
                let e = {
                  let l4 = *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<i32>();

                  unsafe { super::super::super::ritalin::parser::syntax::Tree::from_handle(l4 as u32) }
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l5 = i32::from(*ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>());
                  let v12 = match l5 {
                    0 => {
                      let e12 = {
                        let l6 = *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                        let l7 = *ptr1.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
                        let len8 = l7;
                        let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                        _rt::string_lift(bytes8)
                      };
                      ParserError::SyntaxError(e12)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      let e12 = {
                        let l9 = *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                        let l10 = *ptr1.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
                        let len11 = l10;
                        let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                        _rt::string_lift(bytes11)
                      };
                      ParserError::IncrementalEditError(e12)
                    }
                  };

                  v12
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            };
            result13
          }
        }
      }

    }

  }
  pub mod scanner {

    #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      #[derive(Clone)]
      pub struct SyntaxKind {
        pub id: u32,
        pub text: _rt::String,
        pub is_keyword: bool,
        pub is_terminal: bool,
      }
      impl ::core::fmt::Debug for SyntaxKind {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("SyntaxKind").field("id", &self.id).field("text", &self.text).field("is-keyword", &self.is_keyword).field("is-terminal", &self.is_terminal).finish()
        }
      }
      #[derive(Clone)]
      pub struct TokenItem {
        pub kind: SyntaxKind,
        pub offset: u32,
        pub len: u32,
        pub value: Option<_rt::String>,
      }
      impl ::core::fmt::Debug for TokenItem {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("TokenItem").field("kind", &self.kind).field("offset", &self.offset).field("len", &self.len).field("value", &self.value).finish()
        }
      }
      #[derive(Clone)]
      pub struct Token {
        pub leading: Option<_rt::Vec::<TokenItem>>,
        pub main: TokenItem,
        pub trailing: Option<_rt::Vec::<TokenItem>>,
      }
      impl ::core::fmt::Debug for Token {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Token").field("leading", &self.leading).field("main", &self.main).field("trailing", &self.trailing).finish()
        }
      }
      #[derive(Clone)]
      pub struct ScannerScope {
        pub next_index: u32,
        pub lookahead: Option<Token>,
      }
      impl ::core::fmt::Debug for ScannerScope {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("ScannerScope").field("next-index", &self.next_index).field("lookahead", &self.lookahead).finish()
        }
      }

    }

  }
}
mod _rt {
  #![allow(dead_code, clippy::all)]
  pub use alloc_crate::string::String;
  pub use alloc_crate::vec::Vec;


  use core::fmt;
  use core::marker;
  use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

  /// A type which represents a component model resource, either imported or
  /// exported into this component.
  ///
  /// This is a low-level wrapper which handles the lifetime of the resource
  /// (namely this has a destructor). The `T` provided defines the component model
  /// intrinsics that this wrapper uses.
  ///
  /// One of the chief purposes of this type is to provide `Deref` implementations
  /// to access the underlying data when it is owned.
  ///
  /// This type is primarily used in generated code for exported and imported
  /// resources.
  #[repr(transparent)]
  pub struct Resource<T: WasmResource> {
    // NB: This would ideally be `u32` but it is not. The fact that this has
    // interior mutability is not exposed in the API of this type except for the
    // `take_handle` method which is supposed to in theory be private.
    //
    // This represents, almost all the time, a valid handle value. When it's
    // invalid it's stored as `u32::MAX`.
    handle: AtomicU32,
    _marker: marker::PhantomData<T>,
  }

  /// A trait which all wasm resources implement, namely providing the ability to
  /// drop a resource.
  ///
  /// This generally is implemented by generated code, not user-facing code.
  #[allow(clippy::missing_safety_doc)]
  pub unsafe trait WasmResource {
    /// Invokes the `[resource-drop]...` intrinsic.
    unsafe fn drop(handle: u32);
  }

  impl<T: WasmResource> Resource<T> {
    #[doc(hidden)]
    pub unsafe fn from_handle(handle: u32) -> Self {
      debug_assert!(handle != u32::MAX);
      Self {
        handle: AtomicU32::new(handle),
        _marker: marker::PhantomData,
      }
    }

    /// Takes ownership of the handle owned by `resource`.
    ///
    /// Note that this ideally would be `into_handle` taking `Resource<T>` by
    /// ownership. The code generator does not enable that in all situations,
    /// unfortunately, so this is provided instead.
    ///
    /// Also note that `take_handle` is in theory only ever called on values
    /// owned by a generated function. For example a generated function might
    /// take `Resource<T>` as an argument but then call `take_handle` on a
    /// reference to that argument. In that sense the dynamic nature of
    /// `take_handle` should only be exposed internally to generated code, not
    /// to user code.
    #[doc(hidden)]
    pub fn take_handle(resource: &Resource<T>) -> u32 {
      resource.handle.swap(u32::MAX, Relaxed)
    }

    #[doc(hidden)]
    pub fn handle(resource: &Resource<T>) -> u32 {
      resource.handle.load(Relaxed)
    }
  }

  impl<T: WasmResource> fmt::Debug for Resource<T> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      f.debug_struct("Resource")
      .field("handle", &self.handle)
      .finish()
    }
  }

  impl<T: WasmResource> Drop for Resource<T> {
    fn drop(&mut self) {
      unsafe {
        match self.handle.load(Relaxed) {
          // If this handle was "taken" then don't do anything in the
          // destructor.
          u32::MAX => {}

          // ... but otherwise do actually destroy it with the imported
          // component model intrinsic as defined through `T`.
          other => T::drop(other),
        }
      }
    }
  }
  pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
    if cfg!(debug_assertions) {
      String::from_utf8(bytes).unwrap()
    } else {
      String::from_utf8_unchecked(bytes)
    }
  }
  pub unsafe fn bool_lift(val: u8) -> bool {
    if cfg!(debug_assertions) {
      match val {
        0 => false,
        1 => true,
        _ => panic!("invalid bool discriminant"),
      }
    } else {
      val != 0
    }
  }
  pub unsafe fn invalid_enum_discriminant<T>() -> T {
    if cfg!(debug_assertions) {
      panic!("invalid enum discriminant")
    } else {
      unsafe { core::hint::unreachable_unchecked() }
    }
  }
  pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
    if size == 0 {
      return;
    }
    let layout = alloc::Layout::from_size_align_unchecked(size, align);
    alloc::dealloc(ptr, layout);
  }
  
  pub fn as_i32<T: AsI32>(t: T) -> i32 {
    t.as_i32()
  }

  pub trait AsI32 {
    fn as_i32(self) -> i32;
  }

  impl<'a, T: Copy + AsI32> AsI32 for &'a T {
    fn as_i32(self) -> i32 {
      (*self).as_i32()
    }
  }
  
  impl AsI32 for i32 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u32 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for i16 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u16 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for i8 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u8 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for char {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for usize {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  extern crate alloc as alloc_crate;
  pub use alloc_crate::alloc;
}

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.41.0:ritalin:parser-app@0.0.1:app-world:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1395] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xf3\x09\x01A\x02\x01\
A\x08\x01B\x0c\x01r\x04\x02idy\x04texts\x0ais-keyword\x7f\x0bis-terminal\x7f\x04\
\0\x0bsyntax-kind\x03\0\0\x01ks\x01r\x04\x04kind\x01\x06offsety\x03leny\x05value\
\x02\x04\0\x0atoken-item\x03\0\x03\x01p\x04\x01k\x05\x01r\x03\x07leading\x06\x04\
main\x04\x08trailing\x06\x04\0\x05token\x03\0\x07\x01k\x08\x01r\x02\x0anext-inde\
xy\x09lookahead\x09\x04\0\x0dscanner-scope\x03\0\x0a\x03\0\x1britalin:scanner/ty\
pes@0.0.1\x05\0\x02\x03\0\0\x0bsyntax-kind\x01B\x1d\x02\x03\x02\x01\x01\x04\0\x0b\
syntax-kind\x03\0\0\x04\0\x04tree\x03\x01\x04\0\x04node\x03\x01\x01m\x07\x09toke\
n-set\x0dleading-token\x0etrailing-token\x0amain-token\x04node\x05error\x0bfatal\
-error\x04\0\x09node-type\x03\0\x04\x01m\x02\x06delete\x05shift\x04\0\x0frecover\
y-status\x03\0\x06\x01k\x07\x01r\x04\x04kind\x01\x09node-type\x05\x05statew\x08r\
ecovery\x08\x04\0\x08metadata\x03\0\x09\x01h\x02\x01i\x03\x01@\x01\x04self\x0b\0\
\x0c\x04\0\x11[method]tree.root\x01\x0d\x01h\x03\x01@\x01\x04self\x0e\0\x0a\x04\0\
\x15[method]node.metadata\x01\x0f\x01@\x01\x04self\x0e\0y\x04\0\x19[method]node.\
offset-start\x01\x10\x04\0\x17[method]node.offset-end\x01\x10\x01ks\x01@\x01\x04\
self\x0e\0\x11\x04\0\x12[method]node.value\x01\x12\x01p\x0c\x01@\x01\x04self\x0e\
\0\x13\x04\0\x1b[method]node.leading-trivia\x01\x14\x04\0\x1b[method]node.tralin\
g-trivia\x01\x14\x04\0\x15[method]node.children\x01\x14\x03\0\x1britalin:parser/\
syntax@0.0.1\x05\x02\x02\x03\0\x01\x04tree\x01B\x18\x02\x03\x02\x01\x03\x04\0\x04\
tree\x03\0\0\x04\0\x0bsyntax-tree\x03\0\x01\x04\0\x06parser\x03\x01\x01q\x02\x0c\
syntax-error\x01s\0\x16incremental-edit-error\x01s\0\x04\0\x0cparser-error\x03\0\
\x04\x01r\x03\x06offsety\x08from-leny\x06to-leny\x04\0\x0aedit-scope\x03\0\x06\x04\
\0\x12incremental-parser\x03\x01\x01i\x03\x01@\0\0\x09\x04\0\x13[constructor]par\
ser\x01\x0a\x01h\x03\x01i\x02\x01j\x01\x0c\x01\x05\x01@\x02\x04self\x0b\x06sourc\
es\0\x0d\x04\0\x14[method]parser.parse\x01\x0e\x01i\x08\x01j\x01\x0f\x01\x05\x01\
@\x03\x04self\x0b\x04tree\x0c\x04edit\x07\0\x10\x04\0\x1a[method]parser.incremen\
tal\x01\x11\x01h\x08\x01@\x02\x04self\x12\x06sources\0\x0d\x04\0\x20[method]incr\
emental-parser.parse\x01\x13\x03\0\x1critalin:parser/parsers@0.0.1\x05\x04\x04\0\
\"ritalin:parser-app/app-world@0.0.1\x04\0\x0b\x0f\x01\0\x09app-world\x03\0\0\0G\
\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen\
-rust\x060.41.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

