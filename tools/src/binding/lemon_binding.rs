/* automatically generated by rust-bindgen 0.71.1 */

#![allow(dead_code, non_snake_case, non_camel_case_types, non_upper_case_globals)]

pub const NO_OFFSET: i32 = -2147483647;
unsafe extern "C" {
    pub fn Symbol_init();
}
unsafe extern "C" {
    pub fn Symbol_new(arg1: *const ::std::os::raw::c_char) -> *mut symbol;
}
unsafe extern "C" {
    pub fn Symbol_count() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Symbol_arrayof() -> *mut *mut symbol;
}
unsafe extern "C" {
    pub fn Parse(lemp: *mut lemon);
}
unsafe extern "C" {
    pub fn ReportOutput(lemp: *mut lemon);
}
pub const Boolean_LEMON_FALSE: Boolean = 0;
pub const Boolean_LEMON_TRUE: Boolean = 1;
pub type Boolean = ::std::os::raw::c_uint;
pub const symbol_type_TERMINAL: symbol_type = 0;
pub const symbol_type_NONTERMINAL: symbol_type = 1;
pub const symbol_type_MULTITERMINAL: symbol_type = 2;
pub type symbol_type = ::std::os::raw::c_uint;
pub const e_assoc_LEFT: e_assoc = 0;
pub const e_assoc_RIGHT: e_assoc = 1;
pub const e_assoc_NONE: e_assoc = 2;
pub const e_assoc_UNK: e_assoc = 3;
pub type e_assoc = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symbol {
    pub name: *const ::std::os::raw::c_char,
    pub index: ::std::os::raw::c_int,
    pub type_: symbol_type,
    pub rule: *mut rule,
    pub fallback: *mut symbol,
    pub prec: ::std::os::raw::c_int,
    pub assoc: e_assoc,
    pub firstset: *mut ::std::os::raw::c_char,
    pub lambda: Boolean,
    pub useCnt: ::std::os::raw::c_int,
    pub destructor: *mut ::std::os::raw::c_char,
    pub destLineno: ::std::os::raw::c_int,
    pub datatype: *mut ::std::os::raw::c_char,
    pub dtnum: ::std::os::raw::c_int,
    pub bContent: ::std::os::raw::c_int,
    pub nsubsym: ::std::os::raw::c_int,
    pub subsym: *mut *mut symbol,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of symbol"][::std::mem::size_of::<symbol>() - 104usize];
    ["Alignment of symbol"][::std::mem::align_of::<symbol>() - 8usize];
    ["Offset of field: symbol::name"][::std::mem::offset_of!(symbol, name) - 0usize];
    ["Offset of field: symbol::index"][::std::mem::offset_of!(symbol, index) - 8usize];
    ["Offset of field: symbol::type_"][::std::mem::offset_of!(symbol, type_) - 12usize];
    ["Offset of field: symbol::rule"][::std::mem::offset_of!(symbol, rule) - 16usize];
    ["Offset of field: symbol::fallback"][::std::mem::offset_of!(symbol, fallback) - 24usize];
    ["Offset of field: symbol::prec"][::std::mem::offset_of!(symbol, prec) - 32usize];
    ["Offset of field: symbol::assoc"][::std::mem::offset_of!(symbol, assoc) - 36usize];
    ["Offset of field: symbol::firstset"][::std::mem::offset_of!(symbol, firstset) - 40usize];
    ["Offset of field: symbol::lambda"][::std::mem::offset_of!(symbol, lambda) - 48usize];
    ["Offset of field: symbol::useCnt"][::std::mem::offset_of!(symbol, useCnt) - 52usize];
    ["Offset of field: symbol::destructor"][::std::mem::offset_of!(symbol, destructor) - 56usize];
    ["Offset of field: symbol::destLineno"][::std::mem::offset_of!(symbol, destLineno) - 64usize];
    ["Offset of field: symbol::datatype"][::std::mem::offset_of!(symbol, datatype) - 72usize];
    ["Offset of field: symbol::dtnum"][::std::mem::offset_of!(symbol, dtnum) - 80usize];
    ["Offset of field: symbol::bContent"][::std::mem::offset_of!(symbol, bContent) - 84usize];
    ["Offset of field: symbol::nsubsym"][::std::mem::offset_of!(symbol, nsubsym) - 88usize];
    ["Offset of field: symbol::subsym"][::std::mem::offset_of!(symbol, subsym) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rule {
    pub lhs: *mut symbol,
    pub lhsalias: *const ::std::os::raw::c_char,
    pub lhsStart: ::std::os::raw::c_int,
    pub ruleline: ::std::os::raw::c_int,
    pub nrhs: ::std::os::raw::c_int,
    pub rhs: *mut *mut symbol,
    pub rhsalias: *mut *const ::std::os::raw::c_char,
    pub line: ::std::os::raw::c_int,
    pub code: *const ::std::os::raw::c_char,
    pub codePrefix: *const ::std::os::raw::c_char,
    pub codeSuffix: *const ::std::os::raw::c_char,
    pub precsym: *mut symbol,
    pub index: ::std::os::raw::c_int,
    pub iRule: ::std::os::raw::c_int,
    pub noCode: Boolean,
    pub codeEmitted: Boolean,
    pub canReduce: Boolean,
    pub doesReduce: Boolean,
    pub neverReduce: Boolean,
    pub nextlhs: *mut rule,
    pub next: *mut rule,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rule"][::std::mem::size_of::<rule>() - 136usize];
    ["Alignment of rule"][::std::mem::align_of::<rule>() - 8usize];
    ["Offset of field: rule::lhs"][::std::mem::offset_of!(rule, lhs) - 0usize];
    ["Offset of field: rule::lhsalias"][::std::mem::offset_of!(rule, lhsalias) - 8usize];
    ["Offset of field: rule::lhsStart"][::std::mem::offset_of!(rule, lhsStart) - 16usize];
    ["Offset of field: rule::ruleline"][::std::mem::offset_of!(rule, ruleline) - 20usize];
    ["Offset of field: rule::nrhs"][::std::mem::offset_of!(rule, nrhs) - 24usize];
    ["Offset of field: rule::rhs"][::std::mem::offset_of!(rule, rhs) - 32usize];
    ["Offset of field: rule::rhsalias"][::std::mem::offset_of!(rule, rhsalias) - 40usize];
    ["Offset of field: rule::line"][::std::mem::offset_of!(rule, line) - 48usize];
    ["Offset of field: rule::code"][::std::mem::offset_of!(rule, code) - 56usize];
    ["Offset of field: rule::codePrefix"][::std::mem::offset_of!(rule, codePrefix) - 64usize];
    ["Offset of field: rule::codeSuffix"][::std::mem::offset_of!(rule, codeSuffix) - 72usize];
    ["Offset of field: rule::precsym"][::std::mem::offset_of!(rule, precsym) - 80usize];
    ["Offset of field: rule::index"][::std::mem::offset_of!(rule, index) - 88usize];
    ["Offset of field: rule::iRule"][::std::mem::offset_of!(rule, iRule) - 92usize];
    ["Offset of field: rule::noCode"][::std::mem::offset_of!(rule, noCode) - 96usize];
    ["Offset of field: rule::codeEmitted"][::std::mem::offset_of!(rule, codeEmitted) - 100usize];
    ["Offset of field: rule::canReduce"][::std::mem::offset_of!(rule, canReduce) - 104usize];
    ["Offset of field: rule::doesReduce"][::std::mem::offset_of!(rule, doesReduce) - 108usize];
    ["Offset of field: rule::neverReduce"][::std::mem::offset_of!(rule, neverReduce) - 112usize];
    ["Offset of field: rule::nextlhs"][::std::mem::offset_of!(rule, nextlhs) - 120usize];
    ["Offset of field: rule::next"][::std::mem::offset_of!(rule, next) - 128usize];
};
pub const cfgstatus_COMPLETE: cfgstatus = 0;
pub const cfgstatus_INCOMPLETE: cfgstatus = 1;
pub type cfgstatus = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct config {
    pub rp: *mut rule,
    pub dot: ::std::os::raw::c_int,
    pub fws: *mut ::std::os::raw::c_char,
    pub fplp: *mut plink,
    pub bplp: *mut plink,
    pub stp: *mut state,
    pub status: cfgstatus,
    pub next: *mut config,
    pub bp: *mut config,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of config"][::std::mem::size_of::<config>() - 72usize];
    ["Alignment of config"][::std::mem::align_of::<config>() - 8usize];
    ["Offset of field: config::rp"][::std::mem::offset_of!(config, rp) - 0usize];
    ["Offset of field: config::dot"][::std::mem::offset_of!(config, dot) - 8usize];
    ["Offset of field: config::fws"][::std::mem::offset_of!(config, fws) - 16usize];
    ["Offset of field: config::fplp"][::std::mem::offset_of!(config, fplp) - 24usize];
    ["Offset of field: config::bplp"][::std::mem::offset_of!(config, bplp) - 32usize];
    ["Offset of field: config::stp"][::std::mem::offset_of!(config, stp) - 40usize];
    ["Offset of field: config::status"][::std::mem::offset_of!(config, status) - 48usize];
    ["Offset of field: config::next"][::std::mem::offset_of!(config, next) - 56usize];
    ["Offset of field: config::bp"][::std::mem::offset_of!(config, bp) - 64usize];
};
pub const e_action_SHIFT: e_action = 0;
pub const e_action_ACCEPT: e_action = 1;
pub const e_action_REDUCE: e_action = 2;
pub const e_action_ERROR: e_action = 3;
pub const e_action_SSCONFLICT: e_action = 4;
pub const e_action_SRCONFLICT: e_action = 5;
pub const e_action_RRCONFLICT: e_action = 6;
pub const e_action_SH_RESOLVED: e_action = 7;
pub const e_action_RD_RESOLVED: e_action = 8;
pub const e_action_NOT_USED: e_action = 9;
pub const e_action_SHIFTREDUCE: e_action = 10;
pub type e_action = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct action {
    pub sp: *mut symbol,
    pub type_: e_action,
    pub x: action__bindgen_ty_1,
    pub spOpt: *mut symbol,
    pub next: *mut action,
    pub collide: *mut action,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union action__bindgen_ty_1 {
    pub stp: *mut state,
    pub rp: *mut rule,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of action__bindgen_ty_1"][::std::mem::size_of::<action__bindgen_ty_1>() - 8usize];
    ["Alignment of action__bindgen_ty_1"][::std::mem::align_of::<action__bindgen_ty_1>() - 8usize];
    ["Offset of field: action__bindgen_ty_1::stp"]
        [::std::mem::offset_of!(action__bindgen_ty_1, stp) - 0usize];
    ["Offset of field: action__bindgen_ty_1::rp"]
        [::std::mem::offset_of!(action__bindgen_ty_1, rp) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of action"][::std::mem::size_of::<action>() - 48usize];
    ["Alignment of action"][::std::mem::align_of::<action>() - 8usize];
    ["Offset of field: action::sp"][::std::mem::offset_of!(action, sp) - 0usize];
    ["Offset of field: action::type_"][::std::mem::offset_of!(action, type_) - 8usize];
    ["Offset of field: action::x"][::std::mem::offset_of!(action, x) - 16usize];
    ["Offset of field: action::spOpt"][::std::mem::offset_of!(action, spOpt) - 24usize];
    ["Offset of field: action::next"][::std::mem::offset_of!(action, next) - 32usize];
    ["Offset of field: action::collide"][::std::mem::offset_of!(action, collide) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct state {
    pub bp: *mut config,
    pub cfp: *mut config,
    pub statenum: ::std::os::raw::c_int,
    pub ap: *mut action,
    pub nTknAct: ::std::os::raw::c_int,
    pub nNtAct: ::std::os::raw::c_int,
    pub iTknOfst: ::std::os::raw::c_int,
    pub iNtOfst: ::std::os::raw::c_int,
    pub iDfltReduce: ::std::os::raw::c_int,
    pub pDfltReduce: *mut rule,
    pub autoReduce: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of state"][::std::mem::size_of::<state>() - 72usize];
    ["Alignment of state"][::std::mem::align_of::<state>() - 8usize];
    ["Offset of field: state::bp"][::std::mem::offset_of!(state, bp) - 0usize];
    ["Offset of field: state::cfp"][::std::mem::offset_of!(state, cfp) - 8usize];
    ["Offset of field: state::statenum"][::std::mem::offset_of!(state, statenum) - 16usize];
    ["Offset of field: state::ap"][::std::mem::offset_of!(state, ap) - 24usize];
    ["Offset of field: state::nTknAct"][::std::mem::offset_of!(state, nTknAct) - 32usize];
    ["Offset of field: state::nNtAct"][::std::mem::offset_of!(state, nNtAct) - 36usize];
    ["Offset of field: state::iTknOfst"][::std::mem::offset_of!(state, iTknOfst) - 40usize];
    ["Offset of field: state::iNtOfst"][::std::mem::offset_of!(state, iNtOfst) - 44usize];
    ["Offset of field: state::iDfltReduce"][::std::mem::offset_of!(state, iDfltReduce) - 48usize];
    ["Offset of field: state::pDfltReduce"][::std::mem::offset_of!(state, pDfltReduce) - 56usize];
    ["Offset of field: state::autoReduce"][::std::mem::offset_of!(state, autoReduce) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lemon {
    pub sorted: *mut *mut state,
    pub rule: *mut rule,
    pub startRule: *mut rule,
    pub nstate: ::std::os::raw::c_int,
    pub nxstate: ::std::os::raw::c_int,
    pub nrule: ::std::os::raw::c_int,
    pub nruleWithAction: ::std::os::raw::c_int,
    pub nsymbol: ::std::os::raw::c_int,
    pub nterminal: ::std::os::raw::c_int,
    pub minShiftReduce: ::std::os::raw::c_int,
    pub errAction: ::std::os::raw::c_int,
    pub accAction: ::std::os::raw::c_int,
    pub noAction: ::std::os::raw::c_int,
    pub minReduce: ::std::os::raw::c_int,
    pub maxAction: ::std::os::raw::c_int,
    pub symbols: *mut *mut symbol,
    pub errorcnt: ::std::os::raw::c_int,
    pub errsym: *mut symbol,
    pub wildcard: *mut symbol,
    pub name: *mut ::std::os::raw::c_char,
    pub arg: *mut ::std::os::raw::c_char,
    pub ctx: *mut ::std::os::raw::c_char,
    pub tokentype: *mut ::std::os::raw::c_char,
    pub vartype: *mut ::std::os::raw::c_char,
    pub start: *mut ::std::os::raw::c_char,
    pub stacksize: *mut ::std::os::raw::c_char,
    pub include: *mut ::std::os::raw::c_char,
    pub error: *mut ::std::os::raw::c_char,
    pub overflow: *mut ::std::os::raw::c_char,
    pub failure: *mut ::std::os::raw::c_char,
    pub accept: *mut ::std::os::raw::c_char,
    pub extracode: *mut ::std::os::raw::c_char,
    pub tokendest: *mut ::std::os::raw::c_char,
    pub vardest: *mut ::std::os::raw::c_char,
    pub filename: *mut ::std::os::raw::c_char,
    pub outname: *mut ::std::os::raw::c_char,
    pub tokenprefix: *mut ::std::os::raw::c_char,
    pub reallocFunc: *mut ::std::os::raw::c_char,
    pub freeFunc: *mut ::std::os::raw::c_char,
    pub nconflict: ::std::os::raw::c_int,
    pub nactiontab: ::std::os::raw::c_int,
    pub nlookaheadtab: ::std::os::raw::c_int,
    pub tablesize: ::std::os::raw::c_int,
    pub basisflag: ::std::os::raw::c_int,
    pub printPreprocessed: ::std::os::raw::c_int,
    pub has_fallback: ::std::os::raw::c_int,
    pub nolinenosflag: ::std::os::raw::c_int,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lemon"][::std::mem::size_of::<lemon>() - 312usize];
    ["Alignment of lemon"][::std::mem::align_of::<lemon>() - 8usize];
    ["Offset of field: lemon::sorted"][::std::mem::offset_of!(lemon, sorted) - 0usize];
    ["Offset of field: lemon::rule"][::std::mem::offset_of!(lemon, rule) - 8usize];
    ["Offset of field: lemon::startRule"][::std::mem::offset_of!(lemon, startRule) - 16usize];
    ["Offset of field: lemon::nstate"][::std::mem::offset_of!(lemon, nstate) - 24usize];
    ["Offset of field: lemon::nxstate"][::std::mem::offset_of!(lemon, nxstate) - 28usize];
    ["Offset of field: lemon::nrule"][::std::mem::offset_of!(lemon, nrule) - 32usize];
    ["Offset of field: lemon::nruleWithAction"]
        [::std::mem::offset_of!(lemon, nruleWithAction) - 36usize];
    ["Offset of field: lemon::nsymbol"][::std::mem::offset_of!(lemon, nsymbol) - 40usize];
    ["Offset of field: lemon::nterminal"][::std::mem::offset_of!(lemon, nterminal) - 44usize];
    ["Offset of field: lemon::minShiftReduce"]
        [::std::mem::offset_of!(lemon, minShiftReduce) - 48usize];
    ["Offset of field: lemon::errAction"][::std::mem::offset_of!(lemon, errAction) - 52usize];
    ["Offset of field: lemon::accAction"][::std::mem::offset_of!(lemon, accAction) - 56usize];
    ["Offset of field: lemon::noAction"][::std::mem::offset_of!(lemon, noAction) - 60usize];
    ["Offset of field: lemon::minReduce"][::std::mem::offset_of!(lemon, minReduce) - 64usize];
    ["Offset of field: lemon::maxAction"][::std::mem::offset_of!(lemon, maxAction) - 68usize];
    ["Offset of field: lemon::symbols"][::std::mem::offset_of!(lemon, symbols) - 72usize];
    ["Offset of field: lemon::errorcnt"][::std::mem::offset_of!(lemon, errorcnt) - 80usize];
    ["Offset of field: lemon::errsym"][::std::mem::offset_of!(lemon, errsym) - 88usize];
    ["Offset of field: lemon::wildcard"][::std::mem::offset_of!(lemon, wildcard) - 96usize];
    ["Offset of field: lemon::name"][::std::mem::offset_of!(lemon, name) - 104usize];
    ["Offset of field: lemon::arg"][::std::mem::offset_of!(lemon, arg) - 112usize];
    ["Offset of field: lemon::ctx"][::std::mem::offset_of!(lemon, ctx) - 120usize];
    ["Offset of field: lemon::tokentype"][::std::mem::offset_of!(lemon, tokentype) - 128usize];
    ["Offset of field: lemon::vartype"][::std::mem::offset_of!(lemon, vartype) - 136usize];
    ["Offset of field: lemon::start"][::std::mem::offset_of!(lemon, start) - 144usize];
    ["Offset of field: lemon::stacksize"][::std::mem::offset_of!(lemon, stacksize) - 152usize];
    ["Offset of field: lemon::include"][::std::mem::offset_of!(lemon, include) - 160usize];
    ["Offset of field: lemon::error"][::std::mem::offset_of!(lemon, error) - 168usize];
    ["Offset of field: lemon::overflow"][::std::mem::offset_of!(lemon, overflow) - 176usize];
    ["Offset of field: lemon::failure"][::std::mem::offset_of!(lemon, failure) - 184usize];
    ["Offset of field: lemon::accept"][::std::mem::offset_of!(lemon, accept) - 192usize];
    ["Offset of field: lemon::extracode"][::std::mem::offset_of!(lemon, extracode) - 200usize];
    ["Offset of field: lemon::tokendest"][::std::mem::offset_of!(lemon, tokendest) - 208usize];
    ["Offset of field: lemon::vardest"][::std::mem::offset_of!(lemon, vardest) - 216usize];
    ["Offset of field: lemon::filename"][::std::mem::offset_of!(lemon, filename) - 224usize];
    ["Offset of field: lemon::outname"][::std::mem::offset_of!(lemon, outname) - 232usize];
    ["Offset of field: lemon::tokenprefix"][::std::mem::offset_of!(lemon, tokenprefix) - 240usize];
    ["Offset of field: lemon::reallocFunc"][::std::mem::offset_of!(lemon, reallocFunc) - 248usize];
    ["Offset of field: lemon::freeFunc"][::std::mem::offset_of!(lemon, freeFunc) - 256usize];
    ["Offset of field: lemon::nconflict"][::std::mem::offset_of!(lemon, nconflict) - 264usize];
    ["Offset of field: lemon::nactiontab"][::std::mem::offset_of!(lemon, nactiontab) - 268usize];
    ["Offset of field: lemon::nlookaheadtab"]
        [::std::mem::offset_of!(lemon, nlookaheadtab) - 272usize];
    ["Offset of field: lemon::tablesize"][::std::mem::offset_of!(lemon, tablesize) - 276usize];
    ["Offset of field: lemon::basisflag"][::std::mem::offset_of!(lemon, basisflag) - 280usize];
    ["Offset of field: lemon::printPreprocessed"]
        [::std::mem::offset_of!(lemon, printPreprocessed) - 284usize];
    ["Offset of field: lemon::has_fallback"]
        [::std::mem::offset_of!(lemon, has_fallback) - 288usize];
    ["Offset of field: lemon::nolinenosflag"]
        [::std::mem::offset_of!(lemon, nolinenosflag) - 292usize];
    ["Offset of field: lemon::argc"][::std::mem::offset_of!(lemon, argc) - 296usize];
    ["Offset of field: lemon::argv"][::std::mem::offset_of!(lemon, argv) - 304usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct s_x2 {
    pub size: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub tbl: *mut s_x2node,
    pub ht: *mut *mut s_x2node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of s_x2"][::std::mem::size_of::<s_x2>() - 24usize];
    ["Alignment of s_x2"][::std::mem::align_of::<s_x2>() - 8usize];
    ["Offset of field: s_x2::size"][::std::mem::offset_of!(s_x2, size) - 0usize];
    ["Offset of field: s_x2::count"][::std::mem::offset_of!(s_x2, count) - 4usize];
    ["Offset of field: s_x2::tbl"][::std::mem::offset_of!(s_x2, tbl) - 8usize];
    ["Offset of field: s_x2::ht"][::std::mem::offset_of!(s_x2, ht) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct s_x2node {
    pub data: *mut symbol,
    pub key: *const ::std::os::raw::c_char,
    pub next: *mut s_x2node,
    pub from: *mut *mut s_x2node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of s_x2node"][::std::mem::size_of::<s_x2node>() - 32usize];
    ["Alignment of s_x2node"][::std::mem::align_of::<s_x2node>() - 8usize];
    ["Offset of field: s_x2node::data"][::std::mem::offset_of!(s_x2node, data) - 0usize];
    ["Offset of field: s_x2node::key"][::std::mem::offset_of!(s_x2node, key) - 8usize];
    ["Offset of field: s_x2node::next"][::std::mem::offset_of!(s_x2node, next) - 16usize];
    ["Offset of field: s_x2node::from"][::std::mem::offset_of!(s_x2node, from) - 24usize];
};
pub type x2node = s_x2node;
unsafe extern "C" {
    pub static mut x2a: *mut s_x2;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plink {
    pub _address: u8,
}
